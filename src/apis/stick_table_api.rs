/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`get_stick_table`]
#[derive(Clone, Debug)]
pub struct GetStickTableParams {
    /// Stick table name
    pub name: String,
    /// Process number if master-worker mode, if not only first process is returned
    pub process: i32
}

/// struct for passing parameters to the method [`get_stick_table_entries`]
#[derive(Clone, Debug)]
pub struct GetStickTableEntriesParams {
    /// Stick table name
    pub stick_table: String,
    /// Process number if master-worker mode, if not only first process is returned
    pub process: i32,
    /// A list of filters in format data.<type> <operator> <value> separated by comma
    pub filter: Option<String>,
    /// Key which we want the entries for
    pub key: Option<String>,
    /// Max number of entries to be returned for pagination
    pub count: Option<i32>,
    /// Offset which indicates how many items we skip in pagination
    pub offset: Option<i32>
}

/// struct for passing parameters to the method [`get_stick_tables`]
#[derive(Clone, Debug)]
pub struct GetStickTablesParams {
    /// Process number if master-worker mode, if not all processes are returned
    pub process: Option<i32>
}

/// struct for passing parameters to the method [`set_stick_table_entries`]
#[derive(Clone, Debug)]
pub struct SetStickTableEntriesParams {
    /// Stick table name
    pub stick_table: String,
    /// Process number if master-worker mode, if not only first process is returned
    pub process: i32,
    /// Stick table entry
    pub set_stick_table_entries_request: Option<crate::models::SetStickTableEntriesRequest>
}


/// struct for typed errors of method [`get_stick_table`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStickTableError {
    Status404(crate::models::Error),
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_stick_table_entries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStickTableEntriesError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_stick_tables`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStickTablesError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_stick_table_entries`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetStickTableEntriesError {
    DefaultResponse(crate::models::Error),
    UnknownValue(serde_json::Value),
}


/// Returns one stick table from runtime.
pub async fn get_stick_table(configuration: &configuration::Configuration, params: GetStickTableParams) -> Result<crate::models::StickTable, Error<GetStickTableError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let process = params.process;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/services/haproxy/runtime/stick_tables/{name}", local_var_configuration.base_path, name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("process", &process.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStickTableError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an array of all entries in a given stick tables.
pub async fn get_stick_table_entries(configuration: &configuration::Configuration, params: GetStickTableEntriesParams) -> Result<Vec<crate::models::StickTableEntry>, Error<GetStickTableEntriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let stick_table = params.stick_table;
    let process = params.process;
    let filter = params.filter;
    let key = params.key;
    let count = params.count;
    let offset = params.offset;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/services/haproxy/runtime/stick_table_entries", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("stick_table", &stick_table.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("process", &process.to_string())]);
    if let Some(ref local_var_str) = filter {
        local_var_req_builder = local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = key {
        local_var_req_builder = local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStickTableEntriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns an array of all stick tables.
pub async fn get_stick_tables(configuration: &configuration::Configuration, params: GetStickTablesParams) -> Result<Vec<crate::models::StickTable>, Error<GetStickTablesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let process = params.process;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/services/haproxy/runtime/stick_tables", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = process {
        local_var_req_builder = local_var_req_builder.query(&[("process", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStickTablesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create or update a stick-table entry in the table.
pub async fn set_stick_table_entries(configuration: &configuration::Configuration, params: SetStickTableEntriesParams) -> Result<(), Error<SetStickTableEntriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let stick_table = params.stick_table;
    let process = params.process;
    let set_stick_table_entries_request = params.set_stick_table_entries_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/services/haproxy/runtime/stick_table_entries", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("stick_table", &stick_table.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("process", &process.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_auth_conf) = local_var_configuration.basic_auth {
        local_var_req_builder = local_var_req_builder.basic_auth(local_var_auth_conf.0.to_owned(), local_var_auth_conf.1.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&set_stick_table_entries_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SetStickTableEntriesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

