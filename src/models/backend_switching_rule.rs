/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// BackendSwitchingRule : HAProxy backend switching rule configuration (corresponds to use_backend directive)



#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BackendSwitchingRule {
    #[serde(rename = "cond", skip_serializing_if = "Option::is_none")]
    pub cond: Option<Cond>,
    #[serde(rename = "cond_test", skip_serializing_if = "Option::is_none")]
    pub cond_test: Option<String>,
    #[serde(rename = "index", deserialize_with = "Option::deserialize")]
    pub index: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
}

impl BackendSwitchingRule {
    /// HAProxy backend switching rule configuration (corresponds to use_backend directive)
    pub fn new(index: Option<i32>, name: String) -> BackendSwitchingRule {
        BackendSwitchingRule {
            cond: None,
            cond_test: None,
            index,
            name,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cond {
    #[serde(rename = "if")]
    If,
    #[serde(rename = "unless")]
    Unless,
}

impl Default for Cond {
    fn default() -> Cond {
        Self::If
    }
}

