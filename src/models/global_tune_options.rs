/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GlobalTuneOptions {
    #[serde(rename = "buffers_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub buffers_limit: Option<Option<i32>>,
    #[serde(rename = "buffers_reserve", skip_serializing_if = "Option::is_none")]
    pub buffers_reserve: Option<i32>,
    #[serde(rename = "bufsize", skip_serializing_if = "Option::is_none")]
    pub bufsize: Option<i32>,
    #[serde(rename = "comp_maxlevel", skip_serializing_if = "Option::is_none")]
    pub comp_maxlevel: Option<i32>,
    #[serde(rename = "disable_zero_copy_forwarding", skip_serializing_if = "Option::is_none")]
    pub disable_zero_copy_forwarding: Option<bool>,
    #[serde(rename = "events_max_events_at_once", skip_serializing_if = "Option::is_none")]
    pub events_max_events_at_once: Option<i32>,
    #[serde(rename = "fail_alloc", skip_serializing_if = "Option::is_none")]
    pub fail_alloc: Option<bool>,
    #[serde(rename = "fd_edge_triggered", skip_serializing_if = "Option::is_none")]
    pub fd_edge_triggered: Option<FdEdgeTriggered>,
    #[serde(rename = "h1_zero_copy_fwd_recv", skip_serializing_if = "Option::is_none")]
    pub h1_zero_copy_fwd_recv: Option<H1ZeroCopyFwdRecv>,
    #[serde(rename = "h1_zero_copy_fwd_send", skip_serializing_if = "Option::is_none")]
    pub h1_zero_copy_fwd_send: Option<H1ZeroCopyFwdSend>,
    #[serde(rename = "h2_be_initial_window_size", skip_serializing_if = "Option::is_none")]
    pub h2_be_initial_window_size: Option<i32>,
    #[serde(rename = "h2_be_max_concurrent_streams", skip_serializing_if = "Option::is_none")]
    pub h2_be_max_concurrent_streams: Option<i32>,
    #[serde(rename = "h2_fe_initial_window_size", skip_serializing_if = "Option::is_none")]
    pub h2_fe_initial_window_size: Option<i32>,
    #[serde(rename = "h2_fe_max_concurrent_streams", skip_serializing_if = "Option::is_none")]
    pub h2_fe_max_concurrent_streams: Option<i32>,
    #[serde(rename = "h2_header_table_size", skip_serializing_if = "Option::is_none")]
    pub h2_header_table_size: Option<i32>,
    #[serde(rename = "h2_initial_window_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub h2_initial_window_size: Option<Option<i32>>,
    #[serde(rename = "h2_max_concurrent_streams", skip_serializing_if = "Option::is_none")]
    pub h2_max_concurrent_streams: Option<i32>,
    #[serde(rename = "h2_max_frame_size", skip_serializing_if = "Option::is_none")]
    pub h2_max_frame_size: Option<i32>,
    #[serde(rename = "h2_zero_copy_fwd_send", skip_serializing_if = "Option::is_none")]
    pub h2_zero_copy_fwd_send: Option<H2ZeroCopyFwdSend>,
    #[serde(rename = "http_cookielen", skip_serializing_if = "Option::is_none")]
    pub http_cookielen: Option<i32>,
    #[serde(rename = "http_logurilen", skip_serializing_if = "Option::is_none")]
    pub http_logurilen: Option<i32>,
    #[serde(rename = "http_maxhdr", skip_serializing_if = "Option::is_none")]
    pub http_maxhdr: Option<i32>,
    #[serde(rename = "idle_pool_shared", skip_serializing_if = "Option::is_none")]
    pub idle_pool_shared: Option<IdlePoolShared>,
    #[serde(rename = "idletimer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idletimer: Option<Option<i32>>,
    #[serde(rename = "listener_default_shards", skip_serializing_if = "Option::is_none")]
    pub listener_default_shards: Option<ListenerDefaultShards>,
    #[serde(rename = "listener_multi_queue", skip_serializing_if = "Option::is_none")]
    pub listener_multi_queue: Option<ListenerMultiQueue>,
    #[serde(rename = "lua_burst_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lua_burst_timeout: Option<Option<i32>>,
    #[serde(rename = "lua_forced_yield", skip_serializing_if = "Option::is_none")]
    pub lua_forced_yield: Option<i32>,
    #[serde(rename = "lua_log_loggers", skip_serializing_if = "Option::is_none")]
    pub lua_log_loggers: Option<LuaLogLoggers>,
    #[serde(rename = "lua_log_stderr", skip_serializing_if = "Option::is_none")]
    pub lua_log_stderr: Option<LuaLogStderr>,
    #[serde(rename = "lua_maxmem", skip_serializing_if = "Option::is_none")]
    pub lua_maxmem: Option<bool>,
    #[serde(rename = "lua_service_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lua_service_timeout: Option<Option<i32>>,
    #[serde(rename = "lua_session_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lua_session_timeout: Option<Option<i32>>,
    #[serde(rename = "lua_task_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lua_task_timeout: Option<Option<i32>>,
    #[serde(rename = "max_checks_per_thread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_checks_per_thread: Option<Option<i32>>,
    #[serde(rename = "maxaccept", skip_serializing_if = "Option::is_none")]
    pub maxaccept: Option<i32>,
    #[serde(rename = "maxpollevents", skip_serializing_if = "Option::is_none")]
    pub maxpollevents: Option<i32>,
    #[serde(rename = "maxrewrite", skip_serializing_if = "Option::is_none")]
    pub maxrewrite: Option<i32>,
    #[serde(rename = "memory_hot_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub memory_hot_size: Option<Option<i32>>,
    #[serde(rename = "pattern_cache_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pattern_cache_size: Option<Option<i32>>,
    #[serde(rename = "peers_max_updates_at_once", skip_serializing_if = "Option::is_none")]
    pub peers_max_updates_at_once: Option<i32>,
    #[serde(rename = "pipesize", skip_serializing_if = "Option::is_none")]
    pub pipesize: Option<i32>,
    #[serde(rename = "pool_high_fd_ratio", skip_serializing_if = "Option::is_none")]
    pub pool_high_fd_ratio: Option<i32>,
    #[serde(rename = "pool_low_fd_ratio", skip_serializing_if = "Option::is_none")]
    pub pool_low_fd_ratio: Option<i32>,
    #[serde(rename = "pt_zero_copy_forwarding", skip_serializing_if = "Option::is_none")]
    pub pt_zero_copy_forwarding: Option<PtZeroCopyForwarding>,
    #[serde(rename = "quic_frontend_conn_tx_buffers_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quic_frontend_conn_tx_buffers_limit: Option<Option<i32>>,
    #[serde(rename = "quic_frontend_max_idle_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quic_frontend_max_idle_timeout: Option<Option<i32>>,
    #[serde(rename = "quic_frontend_max_streams_bidi", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quic_frontend_max_streams_bidi: Option<Option<i32>>,
    #[serde(rename = "quic_max_frame_loss", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quic_max_frame_loss: Option<Option<i32>>,
    #[serde(rename = "quic_retry_threshold", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quic_retry_threshold: Option<Option<i32>>,
    #[serde(rename = "quic_socket_owner", skip_serializing_if = "Option::is_none")]
    pub quic_socket_owner: Option<QuicSocketOwner>,
    #[serde(rename = "rcvbuf_backend", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvbuf_backend: Option<Option<i32>>,
    #[serde(rename = "rcvbuf_client", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvbuf_client: Option<Option<i32>>,
    #[serde(rename = "rcvbuf_frontend", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvbuf_frontend: Option<Option<i32>>,
    #[serde(rename = "rcvbuf_server", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rcvbuf_server: Option<Option<i32>>,
    #[serde(rename = "recv_enough", skip_serializing_if = "Option::is_none")]
    pub recv_enough: Option<i32>,
    #[serde(rename = "runqueue_depth", skip_serializing_if = "Option::is_none")]
    pub runqueue_depth: Option<i32>,
    #[serde(rename = "sched_low_latency", skip_serializing_if = "Option::is_none")]
    pub sched_low_latency: Option<SchedLowLatency>,
    #[serde(rename = "sndbuf_backend", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sndbuf_backend: Option<Option<i32>>,
    #[serde(rename = "sndbuf_client", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sndbuf_client: Option<Option<i32>>,
    #[serde(rename = "sndbuf_frontend", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sndbuf_frontend: Option<Option<i32>>,
    #[serde(rename = "sndbuf_server", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sndbuf_server: Option<Option<i32>>,
    #[serde(rename = "ssl_cachesize", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_cachesize: Option<Option<i32>>,
    #[serde(rename = "ssl_capture_buffer_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_capture_buffer_size: Option<Option<i32>>,
    #[serde(rename = "ssl_ctx_cache_size", skip_serializing_if = "Option::is_none")]
    pub ssl_ctx_cache_size: Option<i32>,
    #[serde(rename = "ssl_default_dh_param", skip_serializing_if = "Option::is_none")]
    pub ssl_default_dh_param: Option<i32>,
    #[serde(rename = "ssl_force_private_cache", skip_serializing_if = "Option::is_none")]
    pub ssl_force_private_cache: Option<bool>,
    #[serde(rename = "ssl_keylog", skip_serializing_if = "Option::is_none")]
    pub ssl_keylog: Option<SslKeylog>,
    #[serde(rename = "ssl_lifetime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_lifetime: Option<Option<i32>>,
    #[serde(rename = "ssl_maxrecord", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_maxrecord: Option<Option<i32>>,
    #[serde(rename = "ssl_ocsp_update_max_delay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_ocsp_update_max_delay: Option<Option<i32>>,
    #[serde(rename = "ssl_ocsp_update_min_delay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_ocsp_update_min_delay: Option<Option<i32>>,
    #[serde(rename = "stick_counters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stick_counters: Option<Option<i32>>,
    #[serde(rename = "vars_global_max_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vars_global_max_size: Option<Option<i32>>,
    #[serde(rename = "vars_proc_max_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vars_proc_max_size: Option<Option<i32>>,
    #[serde(rename = "vars_reqres_max_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vars_reqres_max_size: Option<Option<i32>>,
    #[serde(rename = "vars_sess_max_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vars_sess_max_size: Option<Option<i32>>,
    #[serde(rename = "vars_txn_max_size", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vars_txn_max_size: Option<Option<i32>>,
    #[serde(rename = "zlib_memlevel", skip_serializing_if = "Option::is_none")]
    pub zlib_memlevel: Option<i32>,
    #[serde(rename = "zlib_windowsize", skip_serializing_if = "Option::is_none")]
    pub zlib_windowsize: Option<i32>,
}

impl GlobalTuneOptions {
    pub fn new() -> GlobalTuneOptions {
        GlobalTuneOptions {
            buffers_limit: None,
            buffers_reserve: None,
            bufsize: None,
            comp_maxlevel: None,
            disable_zero_copy_forwarding: None,
            events_max_events_at_once: None,
            fail_alloc: None,
            fd_edge_triggered: None,
            h1_zero_copy_fwd_recv: None,
            h1_zero_copy_fwd_send: None,
            h2_be_initial_window_size: None,
            h2_be_max_concurrent_streams: None,
            h2_fe_initial_window_size: None,
            h2_fe_max_concurrent_streams: None,
            h2_header_table_size: None,
            h2_initial_window_size: None,
            h2_max_concurrent_streams: None,
            h2_max_frame_size: None,
            h2_zero_copy_fwd_send: None,
            http_cookielen: None,
            http_logurilen: None,
            http_maxhdr: None,
            idle_pool_shared: None,
            idletimer: None,
            listener_default_shards: None,
            listener_multi_queue: None,
            lua_burst_timeout: None,
            lua_forced_yield: None,
            lua_log_loggers: None,
            lua_log_stderr: None,
            lua_maxmem: None,
            lua_service_timeout: None,
            lua_session_timeout: None,
            lua_task_timeout: None,
            max_checks_per_thread: None,
            maxaccept: None,
            maxpollevents: None,
            maxrewrite: None,
            memory_hot_size: None,
            pattern_cache_size: None,
            peers_max_updates_at_once: None,
            pipesize: None,
            pool_high_fd_ratio: None,
            pool_low_fd_ratio: None,
            pt_zero_copy_forwarding: None,
            quic_frontend_conn_tx_buffers_limit: None,
            quic_frontend_max_idle_timeout: None,
            quic_frontend_max_streams_bidi: None,
            quic_max_frame_loss: None,
            quic_retry_threshold: None,
            quic_socket_owner: None,
            rcvbuf_backend: None,
            rcvbuf_client: None,
            rcvbuf_frontend: None,
            rcvbuf_server: None,
            recv_enough: None,
            runqueue_depth: None,
            sched_low_latency: None,
            sndbuf_backend: None,
            sndbuf_client: None,
            sndbuf_frontend: None,
            sndbuf_server: None,
            ssl_cachesize: None,
            ssl_capture_buffer_size: None,
            ssl_ctx_cache_size: None,
            ssl_default_dh_param: None,
            ssl_force_private_cache: None,
            ssl_keylog: None,
            ssl_lifetime: None,
            ssl_maxrecord: None,
            ssl_ocsp_update_max_delay: None,
            ssl_ocsp_update_min_delay: None,
            stick_counters: None,
            vars_global_max_size: None,
            vars_proc_max_size: None,
            vars_reqres_max_size: None,
            vars_sess_max_size: None,
            vars_txn_max_size: None,
            zlib_memlevel: None,
            zlib_windowsize: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FdEdgeTriggered {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for FdEdgeTriggered {
    fn default() -> FdEdgeTriggered {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum H1ZeroCopyFwdRecv {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for H1ZeroCopyFwdRecv {
    fn default() -> H1ZeroCopyFwdRecv {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum H1ZeroCopyFwdSend {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for H1ZeroCopyFwdSend {
    fn default() -> H1ZeroCopyFwdSend {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum H2ZeroCopyFwdSend {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for H2ZeroCopyFwdSend {
    fn default() -> H2ZeroCopyFwdSend {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdlePoolShared {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for IdlePoolShared {
    fn default() -> IdlePoolShared {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ListenerDefaultShards {
    #[serde(rename = "by-process")]
    Process,
    #[serde(rename = "by-thread")]
    Thread,
    #[serde(rename = "by-group")]
    Group,
}

impl Default for ListenerDefaultShards {
    fn default() -> ListenerDefaultShards {
        Self::Process
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ListenerMultiQueue {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ListenerMultiQueue {
    fn default() -> ListenerMultiQueue {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LuaLogLoggers {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for LuaLogLoggers {
    fn default() -> LuaLogLoggers {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LuaLogStderr {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for LuaLogStderr {
    fn default() -> LuaLogStderr {
        Self::Auto
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PtZeroCopyForwarding {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for PtZeroCopyForwarding {
    fn default() -> PtZeroCopyForwarding {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuicSocketOwner {
    #[serde(rename = "listener")]
    Listener,
    #[serde(rename = "connection")]
    Connection,
}

impl Default for QuicSocketOwner {
    fn default() -> QuicSocketOwner {
        Self::Listener
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SchedLowLatency {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SchedLowLatency {
    fn default() -> SchedLowLatency {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslKeylog {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SslKeylog {
    fn default() -> SslKeylog {
        Self::Enabled
    }
}

