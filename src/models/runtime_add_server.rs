/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// RuntimeAddServer : Settable properties when adding a new server using HAProxy's runtime.



#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RuntimeAddServer {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(rename = "agent-addr", skip_serializing_if = "Option::is_none")]
    pub agent_addr: Option<String>,
    #[serde(rename = "agent-check", skip_serializing_if = "Option::is_none")]
    pub agent_check: Option<AgentCheck>,
    #[serde(rename = "agent-inter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_inter: Option<Option<i32>>,
    #[serde(rename = "agent-port", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_port: Option<Option<i32>>,
    #[serde(rename = "agent-send", skip_serializing_if = "Option::is_none")]
    pub agent_send: Option<String>,
    #[serde(rename = "allow_0rtt", skip_serializing_if = "Option::is_none")]
    pub allow_0rtt: Option<bool>,
    #[serde(rename = "alpn", skip_serializing_if = "Option::is_none")]
    pub alpn: Option<String>,
    #[serde(rename = "backup", skip_serializing_if = "Option::is_none")]
    pub backup: Option<Backup>,
    #[serde(rename = "check", skip_serializing_if = "Option::is_none")]
    pub check: Option<Check>,
    #[serde(rename = "check-send-proxy", skip_serializing_if = "Option::is_none")]
    pub check_send_proxy: Option<CheckSendProxy>,
    #[serde(rename = "check-sni", skip_serializing_if = "Option::is_none")]
    pub check_sni: Option<String>,
    #[serde(rename = "check-ssl", skip_serializing_if = "Option::is_none")]
    pub check_ssl: Option<CheckSsl>,
    #[serde(rename = "check_alpn", skip_serializing_if = "Option::is_none")]
    pub check_alpn: Option<String>,
    #[serde(rename = "check_proto", skip_serializing_if = "Option::is_none")]
    pub check_proto: Option<String>,
    #[serde(rename = "check_via_socks4", skip_serializing_if = "Option::is_none")]
    pub check_via_socks4: Option<CheckViaSocks4>,
    #[serde(rename = "ciphers", skip_serializing_if = "Option::is_none")]
    pub ciphers: Option<String>,
    #[serde(rename = "ciphersuites", skip_serializing_if = "Option::is_none")]
    pub ciphersuites: Option<String>,
    #[serde(rename = "crl_file", skip_serializing_if = "Option::is_none")]
    pub crl_file: Option<String>,
    #[serde(rename = "downinter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub downinter: Option<Option<i32>>,
    #[serde(rename = "error_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub error_limit: Option<Option<i32>>,
    #[serde(rename = "fall", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fall: Option<Option<i32>>,
    #[serde(rename = "fastinter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fastinter: Option<Option<i32>>,
    #[serde(rename = "force_sslv3", skip_serializing_if = "Option::is_none")]
    pub force_sslv3: Option<ForceSslv3>,
    #[serde(rename = "force_tlsv10", skip_serializing_if = "Option::is_none")]
    pub force_tlsv10: Option<ForceTlsv10>,
    #[serde(rename = "force_tlsv11", skip_serializing_if = "Option::is_none")]
    pub force_tlsv11: Option<ForceTlsv11>,
    #[serde(rename = "force_tlsv12", skip_serializing_if = "Option::is_none")]
    pub force_tlsv12: Option<ForceTlsv12>,
    #[serde(rename = "force_tlsv13", skip_serializing_if = "Option::is_none")]
    pub force_tlsv13: Option<ForceTlsv13>,
    #[serde(rename = "health_check_address", skip_serializing_if = "Option::is_none")]
    pub health_check_address: Option<String>,
    #[serde(rename = "health_check_port", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub health_check_port: Option<Option<i32>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "inter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub inter: Option<Option<i32>>,
    #[serde(rename = "maintenance", skip_serializing_if = "Option::is_none")]
    pub maintenance: Option<Maintenance>,
    #[serde(rename = "maxconn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maxconn: Option<Option<i32>>,
    #[serde(rename = "maxqueue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maxqueue: Option<Option<i32>>,
    #[serde(rename = "minconn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub minconn: Option<Option<i32>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "no_sslv3", skip_serializing_if = "Option::is_none")]
    pub no_sslv3: Option<NoSslv3>,
    #[serde(rename = "no_tlsv10", skip_serializing_if = "Option::is_none")]
    pub no_tlsv10: Option<NoTlsv10>,
    #[serde(rename = "no_tlsv11", skip_serializing_if = "Option::is_none")]
    pub no_tlsv11: Option<NoTlsv11>,
    #[serde(rename = "no_tlsv12", skip_serializing_if = "Option::is_none")]
    pub no_tlsv12: Option<NoTlsv12>,
    #[serde(rename = "no_tlsv13", skip_serializing_if = "Option::is_none")]
    pub no_tlsv13: Option<NoTlsv13>,
    #[serde(rename = "npn", skip_serializing_if = "Option::is_none")]
    pub npn: Option<String>,
    #[serde(rename = "observe", skip_serializing_if = "Option::is_none")]
    pub observe: Option<Observe>,
    #[serde(rename = "on-error", skip_serializing_if = "Option::is_none")]
    pub on_error: Option<OnError>,
    #[serde(rename = "on-marked-down", skip_serializing_if = "Option::is_none")]
    pub on_marked_down: Option<OnMarkedDown>,
    #[serde(rename = "on-marked-up", skip_serializing_if = "Option::is_none")]
    pub on_marked_up: Option<OnMarkedUp>,
    #[serde(rename = "pool_low_conn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_low_conn: Option<Option<i32>>,
    #[serde(rename = "pool_max_conn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_max_conn: Option<Option<i32>>,
    #[serde(rename = "pool_purge_delay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_purge_delay: Option<Option<i32>>,
    #[serde(rename = "port", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub port: Option<Option<i32>>,
    #[serde(rename = "proto", skip_serializing_if = "Option::is_none")]
    pub proto: Option<String>,
    #[serde(rename = "proxy-v2-options", skip_serializing_if = "Option::is_none")]
    pub proxy_v2_options: Option<Vec<ProxyV2Options>>,
    #[serde(rename = "rise", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rise: Option<Option<i32>>,
    #[serde(rename = "send-proxy", skip_serializing_if = "Option::is_none")]
    pub send_proxy: Option<SendProxy>,
    #[serde(rename = "send-proxy-v2", skip_serializing_if = "Option::is_none")]
    pub send_proxy_v2: Option<SendProxyV2>,
    #[serde(rename = "send_proxy_v2_ssl", skip_serializing_if = "Option::is_none")]
    pub send_proxy_v2_ssl: Option<SendProxyV2Ssl>,
    #[serde(rename = "send_proxy_v2_ssl_cn", skip_serializing_if = "Option::is_none")]
    pub send_proxy_v2_ssl_cn: Option<SendProxyV2SslCn>,
    #[serde(rename = "slowstart", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slowstart: Option<Option<i32>>,
    #[serde(rename = "sni", skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    #[serde(rename = "ssl", skip_serializing_if = "Option::is_none")]
    pub ssl: Option<Ssl>,
    #[serde(rename = "ssl_cafile", skip_serializing_if = "Option::is_none")]
    pub ssl_cafile: Option<String>,
    #[serde(rename = "ssl_certificate", skip_serializing_if = "Option::is_none")]
    pub ssl_certificate: Option<String>,
    #[serde(rename = "ssl_max_ver", skip_serializing_if = "Option::is_none")]
    pub ssl_max_ver: Option<SslMaxVer>,
    #[serde(rename = "ssl_min_ver", skip_serializing_if = "Option::is_none")]
    pub ssl_min_ver: Option<SslMinVer>,
    #[serde(rename = "ssl_reuse", skip_serializing_if = "Option::is_none")]
    pub ssl_reuse: Option<SslReuse>,
    #[serde(rename = "tfo", skip_serializing_if = "Option::is_none")]
    pub tfo: Option<Tfo>,
    #[serde(rename = "tls_tickets", skip_serializing_if = "Option::is_none")]
    pub tls_tickets: Option<TlsTickets>,
    #[serde(rename = "track", skip_serializing_if = "Option::is_none")]
    pub track: Option<String>,
    #[serde(rename = "verify", skip_serializing_if = "Option::is_none")]
    pub verify: Option<Verify>,
    #[serde(rename = "verifyhost", skip_serializing_if = "Option::is_none")]
    pub verifyhost: Option<String>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<i32>>,
    #[serde(rename = "ws", skip_serializing_if = "Option::is_none")]
    pub ws: Option<Ws>,
}

impl RuntimeAddServer {
    /// Settable properties when adding a new server using HAProxy's runtime.
    pub fn new() -> RuntimeAddServer {
        RuntimeAddServer {
            address: None,
            agent_addr: None,
            agent_check: None,
            agent_inter: None,
            agent_port: None,
            agent_send: None,
            allow_0rtt: None,
            alpn: None,
            backup: None,
            check: None,
            check_send_proxy: None,
            check_sni: None,
            check_ssl: None,
            check_alpn: None,
            check_proto: None,
            check_via_socks4: None,
            ciphers: None,
            ciphersuites: None,
            crl_file: None,
            downinter: None,
            error_limit: None,
            fall: None,
            fastinter: None,
            force_sslv3: None,
            force_tlsv10: None,
            force_tlsv11: None,
            force_tlsv12: None,
            force_tlsv13: None,
            health_check_address: None,
            health_check_port: None,
            id: None,
            inter: None,
            maintenance: None,
            maxconn: None,
            maxqueue: None,
            minconn: None,
            name: None,
            no_sslv3: None,
            no_tlsv10: None,
            no_tlsv11: None,
            no_tlsv12: None,
            no_tlsv13: None,
            npn: None,
            observe: None,
            on_error: None,
            on_marked_down: None,
            on_marked_up: None,
            pool_low_conn: None,
            pool_max_conn: None,
            pool_purge_delay: None,
            port: None,
            proto: None,
            proxy_v2_options: None,
            rise: None,
            send_proxy: None,
            send_proxy_v2: None,
            send_proxy_v2_ssl: None,
            send_proxy_v2_ssl_cn: None,
            slowstart: None,
            sni: None,
            source: None,
            ssl: None,
            ssl_cafile: None,
            ssl_certificate: None,
            ssl_max_ver: None,
            ssl_min_ver: None,
            ssl_reuse: None,
            tfo: None,
            tls_tickets: None,
            track: None,
            verify: None,
            verifyhost: None,
            weight: None,
            ws: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AgentCheck {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for AgentCheck {
    fn default() -> AgentCheck {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Backup {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Backup {
    fn default() -> Backup {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Check {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Check {
    fn default() -> Check {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CheckSendProxy {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for CheckSendProxy {
    fn default() -> CheckSendProxy {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CheckSsl {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for CheckSsl {
    fn default() -> CheckSsl {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CheckViaSocks4 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for CheckViaSocks4 {
    fn default() -> CheckViaSocks4 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceSslv3 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ForceSslv3 {
    fn default() -> ForceSslv3 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceTlsv10 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ForceTlsv10 {
    fn default() -> ForceTlsv10 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceTlsv11 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ForceTlsv11 {
    fn default() -> ForceTlsv11 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceTlsv12 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ForceTlsv12 {
    fn default() -> ForceTlsv12 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForceTlsv13 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ForceTlsv13 {
    fn default() -> ForceTlsv13 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Maintenance {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Maintenance {
    fn default() -> Maintenance {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoSslv3 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for NoSslv3 {
    fn default() -> NoSslv3 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoTlsv10 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for NoTlsv10 {
    fn default() -> NoTlsv10 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoTlsv11 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for NoTlsv11 {
    fn default() -> NoTlsv11 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoTlsv12 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for NoTlsv12 {
    fn default() -> NoTlsv12 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoTlsv13 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for NoTlsv13 {
    fn default() -> NoTlsv13 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Observe {
    #[serde(rename = "layer4")]
    Layer4,
    #[serde(rename = "layer7")]
    Layer7,
}

impl Default for Observe {
    fn default() -> Observe {
        Self::Layer4
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnError {
    #[serde(rename = "fastinter")]
    Fastinter,
    #[serde(rename = "fail-check")]
    FailCheck,
    #[serde(rename = "sudden-death")]
    SuddenDeath,
    #[serde(rename = "mark-down")]
    MarkDown,
}

impl Default for OnError {
    fn default() -> OnError {
        Self::Fastinter
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnMarkedDown {
    #[serde(rename = "shutdown-sessions")]
    ShutdownSessions,
}

impl Default for OnMarkedDown {
    fn default() -> OnMarkedDown {
        Self::ShutdownSessions
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OnMarkedUp {
    #[serde(rename = "shutdown-backup-sessions")]
    ShutdownBackupSessions,
}

impl Default for OnMarkedUp {
    fn default() -> OnMarkedUp {
        Self::ShutdownBackupSessions
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ProxyV2Options {
    #[serde(rename = "ssl")]
    Ssl,
    #[serde(rename = "cert-cn")]
    CertCn,
    #[serde(rename = "ssl-cipher")]
    SslCipher,
    #[serde(rename = "cert-sig")]
    CertSig,
    #[serde(rename = "cert-key")]
    CertKey,
    #[serde(rename = "authority")]
    Authority,
    #[serde(rename = "crc32c")]
    Crc32c,
    #[serde(rename = "unique-id")]
    UniqueId,
}

impl Default for ProxyV2Options {
    fn default() -> ProxyV2Options {
        Self::Ssl
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SendProxy {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SendProxy {
    fn default() -> SendProxy {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SendProxyV2 {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SendProxyV2 {
    fn default() -> SendProxyV2 {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SendProxyV2Ssl {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SendProxyV2Ssl {
    fn default() -> SendProxyV2Ssl {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SendProxyV2SslCn {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SendProxyV2SslCn {
    fn default() -> SendProxyV2SslCn {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ssl {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Ssl {
    fn default() -> Ssl {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslMaxVer {
    #[serde(rename = "SSLv3")]
    Sslv3,
    #[serde(rename = "TLSv1.0")]
    Tlsv1Period0,
    #[serde(rename = "TLSv1.1")]
    Tlsv1Period1,
    #[serde(rename = "TLSv1.2")]
    Tlsv1Period2,
    #[serde(rename = "TLSv1.3")]
    Tlsv1Period3,
}

impl Default for SslMaxVer {
    fn default() -> SslMaxVer {
        Self::Sslv3
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslMinVer {
    #[serde(rename = "SSLv3")]
    Sslv3,
    #[serde(rename = "TLSv1.0")]
    Tlsv1Period0,
    #[serde(rename = "TLSv1.1")]
    Tlsv1Period1,
    #[serde(rename = "TLSv1.2")]
    Tlsv1Period2,
    #[serde(rename = "TLSv1.3")]
    Tlsv1Period3,
}

impl Default for SslMinVer {
    fn default() -> SslMinVer {
        Self::Sslv3
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslReuse {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SslReuse {
    fn default() -> SslReuse {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tfo {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Tfo {
    fn default() -> Tfo {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TlsTickets {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for TlsTickets {
    fn default() -> TlsTickets {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Verify {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "required")]
    Required,
}

impl Default for Verify {
    fn default() -> Verify {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ws {
    #[serde(rename = "auto")]
    Auto,
    #[serde(rename = "h1")]
    H1,
    #[serde(rename = "h2")]
    H2,
}

impl Default for Ws {
    fn default() -> Ws {
        Self::Auto
    }
}

