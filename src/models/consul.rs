/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// Consul : Consul server configuration



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Consul {
    #[serde(rename = "address")]
    pub address: String,
    /// Name of the defaults section to be used in backends created by this service
    #[serde(rename = "defaults", skip_serializing_if = "Option::is_none")]
    pub defaults: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// Defines the health check conditions required for each node to be considered valid for the service.   none: all nodes are considered valid   any: a node is considered valid if any one health check is 'passing'   all: a node is considered valid if all health checks are 'passing'   min: a node is considered valid if the number of 'passing' checks is greater or equal to the 'health_check_policy_min' value.     If the node has less health checks configured then 'health_check_policy_min' it is considered invalid.
    #[serde(rename = "health_check_policy", skip_serializing_if = "Option::is_none")]
    pub health_check_policy: Option<HealthCheckPolicy>,
    #[serde(rename = "health_check_policy_min", skip_serializing_if = "Option::is_none")]
    pub health_check_policy_min: Option<i32>,
    /// Auto generated ID.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "port")]
    pub port: i32,
    /// Duration in seconds in-between data pulling requests to the consul server
    #[serde(rename = "retry_timeout")]
    pub retry_timeout: i32,
    #[serde(rename = "server_slots_base", skip_serializing_if = "Option::is_none")]
    pub server_slots_base: Option<i32>,
    #[serde(rename = "server_slots_growth_increment", skip_serializing_if = "Option::is_none")]
    pub server_slots_growth_increment: Option<i32>,
    #[serde(rename = "server_slots_growth_type", skip_serializing_if = "Option::is_none")]
    pub server_slots_growth_type: Option<ServerSlotsGrowthType>,
    /// deprecated, use service_denylist
    #[serde(rename = "service-blacklist", skip_serializing_if = "Option::is_none")]
    pub service_blacklist: Option<Vec<String>>,
    /// deprecated, use service_allowlist
    #[serde(rename = "service-whitelist", skip_serializing_if = "Option::is_none")]
    pub service_whitelist: Option<Vec<String>>,
    #[serde(rename = "service_allowlist", skip_serializing_if = "Option::is_none")]
    pub service_allowlist: Option<Vec<String>>,
    #[serde(rename = "service_denylist", skip_serializing_if = "Option::is_none")]
    pub service_denylist: Option<Vec<String>>,
    /// Regular expression used to filter services by name.
    #[serde(rename = "service_name_regexp", skip_serializing_if = "Option::is_none")]
    pub service_name_regexp: Option<String>,
    #[serde(rename = "token", skip_serializing_if = "Option::is_none")]
    pub token: Option<String>,
}

impl Consul {
    /// Consul server configuration
    pub fn new(address: String, enabled: bool, port: i32, retry_timeout: i32) -> Consul {
        Consul {
            address,
            defaults: None,
            description: None,
            enabled,
            health_check_policy: None,
            health_check_policy_min: None,
            id: None,
            mode: None,
            name: None,
            namespace: None,
            port,
            retry_timeout,
            server_slots_base: None,
            server_slots_growth_increment: None,
            server_slots_growth_type: None,
            service_blacklist: None,
            service_whitelist: None,
            service_allowlist: None,
            service_denylist: None,
            service_name_regexp: None,
            token: None,
        }
    }
}

/// Defines the health check conditions required for each node to be considered valid for the service.   none: all nodes are considered valid   any: a node is considered valid if any one health check is 'passing'   all: a node is considered valid if all health checks are 'passing'   min: a node is considered valid if the number of 'passing' checks is greater or equal to the 'health_check_policy_min' value.     If the node has less health checks configured then 'health_check_policy_min' it is considered invalid.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HealthCheckPolicy {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "any")]
    Any,
    #[serde(rename = "all")]
    All,
    #[serde(rename = "min")]
    Min,
}

impl Default for HealthCheckPolicy {
    fn default() -> HealthCheckPolicy {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Http
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServerSlotsGrowthType {
    #[serde(rename = "linear")]
    Linear,
    #[serde(rename = "exponential")]
    Exponential,
}

impl Default for ServerSlotsGrowthType {
    fn default() -> ServerSlotsGrowthType {
        Self::Linear
    }
}

