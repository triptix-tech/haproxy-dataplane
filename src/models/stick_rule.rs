/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// StickRule : Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StickRule {
    #[serde(rename = "cond", skip_serializing_if = "Option::is_none")]
    pub cond: Option<Cond>,
    #[serde(rename = "cond_test", skip_serializing_if = "Option::is_none")]
    pub cond_test: Option<String>,
    #[serde(rename = "index", deserialize_with = "Option::deserialize")]
    pub index: Option<i32>,
    #[serde(rename = "pattern")]
    pub pattern: String,
    #[serde(rename = "table", skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl StickRule {
    /// Define a pattern used to create an entry in a stickiness table or matching condition or associate a user to a server.
    pub fn new(index: Option<i32>, pattern: String, r#type: Type) -> StickRule {
        StickRule {
            cond: None,
            cond_test: None,
            index,
            pattern,
            table: None,
            r#type,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cond {
    #[serde(rename = "if")]
    If,
    #[serde(rename = "unless")]
    Unless,
}

impl Default for Cond {
    fn default() -> Cond {
        Self::If
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "match")]
    Match,
    #[serde(rename = "on")]
    On,
    #[serde(rename = "store-request")]
    StoreRequest,
    #[serde(rename = "store-response")]
    StoreResponse,
}

impl Default for Type {
    fn default() -> Type {
        Self::Match
    }
}

