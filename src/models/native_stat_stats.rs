/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NativeStatStats {
    #[serde(rename = "act", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub act: Option<Option<i32>>,
    #[serde(rename = "addr", skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    #[serde(rename = "agent_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_code: Option<Option<i32>>,
    #[serde(rename = "agent_desc", skip_serializing_if = "Option::is_none")]
    pub agent_desc: Option<String>,
    #[serde(rename = "agent_duration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_duration: Option<Option<i32>>,
    #[serde(rename = "agent_fall", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_fall: Option<Option<i32>>,
    #[serde(rename = "agent_health", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_health: Option<Option<i32>>,
    #[serde(rename = "agent_rise", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub agent_rise: Option<Option<i32>>,
    #[serde(rename = "agent_status", skip_serializing_if = "Option::is_none")]
    pub agent_status: Option<AgentStatus>,
    #[serde(rename = "algo", skip_serializing_if = "Option::is_none")]
    pub algo: Option<String>,
    #[serde(rename = "bck", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bck: Option<Option<i32>>,
    #[serde(rename = "bin", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bin: Option<Option<i32>>,
    #[serde(rename = "bout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bout: Option<Option<i32>>,
    #[serde(rename = "check_code", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_code: Option<Option<i32>>,
    #[serde(rename = "check_desc", skip_serializing_if = "Option::is_none")]
    pub check_desc: Option<String>,
    #[serde(rename = "check_duration", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_duration: Option<Option<i32>>,
    #[serde(rename = "check_fall", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_fall: Option<Option<i32>>,
    #[serde(rename = "check_health", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_health: Option<Option<i32>>,
    #[serde(rename = "check_rise", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_rise: Option<Option<i32>>,
    #[serde(rename = "check_status", skip_serializing_if = "Option::is_none")]
    pub check_status: Option<CheckStatus>,
    #[serde(rename = "chkdown", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chkdown: Option<Option<i32>>,
    #[serde(rename = "chkfail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub chkfail: Option<Option<i32>>,
    #[serde(rename = "cli_abrt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cli_abrt: Option<Option<i32>>,
    #[serde(rename = "comp_byp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comp_byp: Option<Option<i32>>,
    #[serde(rename = "comp_in", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comp_in: Option<Option<i32>>,
    #[serde(rename = "comp_out", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comp_out: Option<Option<i32>>,
    #[serde(rename = "comp_rsp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comp_rsp: Option<Option<i32>>,
    #[serde(rename = "conn_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_rate: Option<Option<i32>>,
    #[serde(rename = "conn_rate_max", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_rate_max: Option<Option<i32>>,
    #[serde(rename = "conn_tot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_tot: Option<Option<i32>>,
    #[serde(rename = "cookie", skip_serializing_if = "Option::is_none")]
    pub cookie: Option<String>,
    #[serde(rename = "ctime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ctime: Option<Option<i32>>,
    #[serde(rename = "dcon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dcon: Option<Option<i32>>,
    #[serde(rename = "downtime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub downtime: Option<Option<i32>>,
    #[serde(rename = "dreq", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dreq: Option<Option<i32>>,
    #[serde(rename = "dresp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dresp: Option<Option<i32>>,
    #[serde(rename = "dses", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dses: Option<Option<i32>>,
    #[serde(rename = "econ", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub econ: Option<Option<i32>>,
    #[serde(rename = "ereq", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ereq: Option<Option<i32>>,
    #[serde(rename = "eresp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub eresp: Option<Option<i32>>,
    #[serde(rename = "hanafail", skip_serializing_if = "Option::is_none")]
    pub hanafail: Option<String>,
    #[serde(rename = "hrsp_1xx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_1xx: Option<Option<i32>>,
    #[serde(rename = "hrsp_2xx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_2xx: Option<Option<i32>>,
    #[serde(rename = "hrsp_3xx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_3xx: Option<Option<i32>>,
    #[serde(rename = "hrsp_4xx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_4xx: Option<Option<i32>>,
    #[serde(rename = "hrsp_5xx", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_5xx: Option<Option<i32>>,
    #[serde(rename = "hrsp_other", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hrsp_other: Option<Option<i32>>,
    #[serde(rename = "iid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub iid: Option<Option<i32>>,
    #[serde(rename = "intercepted", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub intercepted: Option<Option<i32>>,
    #[serde(rename = "lastchg", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lastchg: Option<Option<i32>>,
    #[serde(rename = "lastsess", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lastsess: Option<Option<i32>>,
    #[serde(rename = "lbtot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub lbtot: Option<Option<i32>>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "pid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pid: Option<Option<i32>>,
    #[serde(rename = "qcur", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub qcur: Option<Option<i32>>,
    #[serde(rename = "qlimit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub qlimit: Option<Option<i32>>,
    #[serde(rename = "qmax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub qmax: Option<Option<i32>>,
    #[serde(rename = "qtime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub qtime: Option<Option<i32>>,
    #[serde(rename = "rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate: Option<Option<i32>>,
    #[serde(rename = "rate_lim", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate_lim: Option<Option<i32>>,
    #[serde(rename = "rate_max", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rate_max: Option<Option<i32>>,
    #[serde(rename = "req_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub req_rate: Option<Option<i32>>,
    #[serde(rename = "req_rate_max", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub req_rate_max: Option<Option<i32>>,
    #[serde(rename = "req_tot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub req_tot: Option<Option<i32>>,
    #[serde(rename = "rtime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rtime: Option<Option<i32>>,
    #[serde(rename = "scur", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub scur: Option<Option<i32>>,
    #[serde(rename = "sid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sid: Option<Option<i32>>,
    #[serde(rename = "slim", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub slim: Option<Option<i32>>,
    #[serde(rename = "smax", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub smax: Option<Option<i32>>,
    #[serde(rename = "srv_abrt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub srv_abrt: Option<Option<i32>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "stot", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stot: Option<Option<i32>>,
    #[serde(rename = "throttle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub throttle: Option<Option<i32>>,
    #[serde(rename = "tracked", skip_serializing_if = "Option::is_none")]
    pub tracked: Option<String>,
    #[serde(rename = "ttime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ttime: Option<Option<i32>>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<i32>>,
    #[serde(rename = "wredis", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wredis: Option<Option<i32>>,
    #[serde(rename = "wretr", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub wretr: Option<Option<i32>>,
}

impl NativeStatStats {
    pub fn new() -> NativeStatStats {
        NativeStatStats {
            act: None,
            addr: None,
            agent_code: None,
            agent_desc: None,
            agent_duration: None,
            agent_fall: None,
            agent_health: None,
            agent_rise: None,
            agent_status: None,
            algo: None,
            bck: None,
            bin: None,
            bout: None,
            check_code: None,
            check_desc: None,
            check_duration: None,
            check_fall: None,
            check_health: None,
            check_rise: None,
            check_status: None,
            chkdown: None,
            chkfail: None,
            cli_abrt: None,
            comp_byp: None,
            comp_in: None,
            comp_out: None,
            comp_rsp: None,
            conn_rate: None,
            conn_rate_max: None,
            conn_tot: None,
            cookie: None,
            ctime: None,
            dcon: None,
            downtime: None,
            dreq: None,
            dresp: None,
            dses: None,
            econ: None,
            ereq: None,
            eresp: None,
            hanafail: None,
            hrsp_1xx: None,
            hrsp_2xx: None,
            hrsp_3xx: None,
            hrsp_4xx: None,
            hrsp_5xx: None,
            hrsp_other: None,
            iid: None,
            intercepted: None,
            lastchg: None,
            lastsess: None,
            lbtot: None,
            mode: None,
            pid: None,
            qcur: None,
            qlimit: None,
            qmax: None,
            qtime: None,
            rate: None,
            rate_lim: None,
            rate_max: None,
            req_rate: None,
            req_rate_max: None,
            req_tot: None,
            rtime: None,
            scur: None,
            sid: None,
            slim: None,
            smax: None,
            srv_abrt: None,
            status: None,
            stot: None,
            throttle: None,
            tracked: None,
            ttime: None,
            weight: None,
            wredis: None,
            wretr: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AgentStatus {
    #[serde(rename = "UNK")]
    Unk,
    #[serde(rename = "INI")]
    Ini,
    #[serde(rename = "SOCKERR")]
    Sockerr,
    #[serde(rename = "L4OK")]
    L4Ok,
    #[serde(rename = "L4TOUT")]
    L4Tout,
    #[serde(rename = "L4CON")]
    L4Con,
    #[serde(rename = "L7OK")]
    L7Ok,
    #[serde(rename = "L7STS")]
    L7Sts,
}

impl Default for AgentStatus {
    fn default() -> AgentStatus {
        Self::Unk
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CheckStatus {
    #[serde(rename = "UNK")]
    Unk,
    #[serde(rename = "INI")]
    Ini,
    #[serde(rename = "SOCKERR")]
    Sockerr,
    #[serde(rename = "L4OK")]
    L4Ok,
    #[serde(rename = "L4TOUT")]
    L4Tout,
    #[serde(rename = "L4CON")]
    L4Con,
    #[serde(rename = "L6OK")]
    L6Ok,
    #[serde(rename = "L6TOUT")]
    L6Tout,
    #[serde(rename = "L6RSP")]
    L6Rsp,
    #[serde(rename = "L7OK")]
    L7Ok,
    #[serde(rename = "L7OKC")]
    L7Okc,
    #[serde(rename = "L7TOUT")]
    L7Tout,
    #[serde(rename = "L7RSP")]
    L7Rsp,
    #[serde(rename = "L7STS")]
    L7Sts,
}

impl Default for CheckStatus {
    fn default() -> CheckStatus {
        Self::Unk
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "health")]
    Health,
    #[serde(rename = "unknown")]
    Unknown,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Tcp
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "UP")]
    Up,
    #[serde(rename = "DOWN")]
    Down,
    #[serde(rename = "NOLB")]
    Nolb,
    #[serde(rename = "MAINT")]
    Maint,
    #[serde(rename = "no check")]
    NoCheck,
}

impl Default for Status {
    fn default() -> Status {
        Self::Up
    }
}

