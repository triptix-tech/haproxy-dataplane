/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cookie {
    #[serde(rename = "attr", skip_serializing_if = "Option::is_none")]
    pub attr: Option<Vec<crate::models::CookieAttrInner>>,
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<crate::models::CookieDomainInner>>,
    #[serde(rename = "dynamic", skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<bool>,
    #[serde(rename = "httponly", skip_serializing_if = "Option::is_none")]
    pub httponly: Option<bool>,
    #[serde(rename = "indirect", skip_serializing_if = "Option::is_none")]
    pub indirect: Option<bool>,
    #[serde(rename = "maxidle", skip_serializing_if = "Option::is_none")]
    pub maxidle: Option<i32>,
    #[serde(rename = "maxlife", skip_serializing_if = "Option::is_none")]
    pub maxlife: Option<i32>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "nocache", skip_serializing_if = "Option::is_none")]
    pub nocache: Option<bool>,
    #[serde(rename = "postonly", skip_serializing_if = "Option::is_none")]
    pub postonly: Option<bool>,
    #[serde(rename = "preserve", skip_serializing_if = "Option::is_none")]
    pub preserve: Option<bool>,
    #[serde(rename = "secure", skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl Cookie {
    pub fn new(name: String) -> Cookie {
        Cookie {
            attr: None,
            domain: None,
            dynamic: None,
            httponly: None,
            indirect: None,
            maxidle: None,
            maxlife: None,
            name,
            nocache: None,
            postonly: None,
            preserve: None,
            secure: None,
            r#type: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "rewrite")]
    Rewrite,
    #[serde(rename = "insert")]
    Insert,
    #[serde(rename = "prefix")]
    Prefix,
}

impl Default for Type {
    fn default() -> Type {
        Self::Rewrite
    }
}

