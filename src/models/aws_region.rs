/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// AwsRegion : AWS region configuration



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AwsRegion {
    /// AWS Access Key ID.
    #[serde(rename = "access_key_id", skip_serializing_if = "Option::is_none")]
    pub access_key_id: Option<String>,
    /// Specify the AWS filters used to filter the EC2 instances to add
    #[serde(rename = "allowlist", skip_serializing_if = "Option::is_none")]
    pub allowlist: Option<Vec<crate::models::AwsFilters>>,
    /// Specify the AWS filters used to filter the EC2 instances to ignore
    #[serde(rename = "denylist", skip_serializing_if = "Option::is_none")]
    pub denylist: Option<Vec<crate::models::AwsFilters>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// Auto generated ID.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    /// Select which IPv4 address the Service Discovery has to use for the backend server entry
    #[serde(rename = "ipv4_address")]
    pub ipv4_address: Ipv4Address,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "region")]
    pub region: String,
    /// Duration in seconds in-between data pulling requests to the AWS region
    #[serde(rename = "retry_timeout")]
    pub retry_timeout: i32,
    /// AWS Secret Access Key.
    #[serde(rename = "secret_access_key", skip_serializing_if = "Option::is_none")]
    pub secret_access_key: Option<String>,
    #[serde(rename = "server_slots_base", skip_serializing_if = "Option::is_none")]
    pub server_slots_base: Option<i32>,
    #[serde(rename = "server_slots_growth_increment", skip_serializing_if = "Option::is_none")]
    pub server_slots_growth_increment: Option<i32>,
    #[serde(rename = "server_slots_growth_type", skip_serializing_if = "Option::is_none")]
    pub server_slots_growth_type: Option<ServerSlotsGrowthType>,
}

impl AwsRegion {
    /// AWS region configuration
    pub fn new(enabled: bool, ipv4_address: Ipv4Address, name: String, region: String, retry_timeout: i32) -> AwsRegion {
        AwsRegion {
            access_key_id: None,
            allowlist: None,
            denylist: None,
            description: None,
            enabled,
            id: None,
            ipv4_address,
            name,
            region,
            retry_timeout,
            secret_access_key: None,
            server_slots_base: None,
            server_slots_growth_increment: None,
            server_slots_growth_type: None,
        }
    }
}

/// Select which IPv4 address the Service Discovery has to use for the backend server entry
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ipv4Address {
    #[serde(rename = "private")]
    Private,
    #[serde(rename = "public")]
    Public,
}

impl Default for Ipv4Address {
    fn default() -> Ipv4Address {
        Self::Private
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServerSlotsGrowthType {
    #[serde(rename = "linear")]
    Linear,
    #[serde(rename = "exponential")]
    Exponential,
}

impl Default for ServerSlotsGrowthType {
    fn default() -> ServerSlotsGrowthType {
        Self::Linear
    }
}

