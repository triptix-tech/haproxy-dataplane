/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// StickTableEntry : One entry in stick table



#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StickTableEntry {
    #[serde(rename = "bytes_in_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes_in_cnt: Option<Option<i32>>,
    #[serde(rename = "bytes_in_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes_in_rate: Option<Option<i32>>,
    #[serde(rename = "bytes_out_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes_out_cnt: Option<Option<i32>>,
    #[serde(rename = "bytes_out_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes_out_rate: Option<Option<i32>>,
    #[serde(rename = "conn_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_cnt: Option<Option<i32>>,
    #[serde(rename = "conn_cur", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_cur: Option<Option<i32>>,
    #[serde(rename = "conn_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_rate: Option<Option<i32>>,
    #[serde(rename = "exp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub exp: Option<Option<i32>>,
    #[serde(rename = "gpc0", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gpc0: Option<Option<i32>>,
    #[serde(rename = "gpc0_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gpc0_rate: Option<Option<i32>>,
    #[serde(rename = "gpc1", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gpc1: Option<Option<i32>>,
    #[serde(rename = "gpc1_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gpc1_rate: Option<Option<i32>>,
    #[serde(rename = "gpt0", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub gpt0: Option<Option<i32>>,
    #[serde(rename = "http_err_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_err_cnt: Option<Option<i32>>,
    #[serde(rename = "http_err_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_err_rate: Option<Option<i32>>,
    #[serde(rename = "http_req_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_req_cnt: Option<Option<i32>>,
    #[serde(rename = "http_req_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_req_rate: Option<Option<i32>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(rename = "server_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<Option<i32>>,
    #[serde(rename = "sess_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sess_cnt: Option<Option<i32>>,
    #[serde(rename = "sess_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sess_rate: Option<Option<i32>>,
    #[serde(rename = "use", skip_serializing_if = "Option::is_none")]
    pub r#use: Option<bool>,
}

impl StickTableEntry {
    /// One entry in stick table
    pub fn new() -> StickTableEntry {
        StickTableEntry {
            bytes_in_cnt: None,
            bytes_in_rate: None,
            bytes_out_cnt: None,
            bytes_out_rate: None,
            conn_cnt: None,
            conn_cur: None,
            conn_rate: None,
            exp: None,
            gpc0: None,
            gpc0_rate: None,
            gpc1: None,
            gpc1_rate: None,
            gpt0: None,
            http_err_cnt: None,
            http_err_rate: None,
            http_req_cnt: None,
            http_req_rate: None,
            id: None,
            key: None,
            server_id: None,
            sess_cnt: None,
            sess_rate: None,
            r#use: None,
        }
    }
}


