/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct BindParams {
    #[serde(rename = "accept_netscaler_cip", skip_serializing_if = "Option::is_none")]
    pub accept_netscaler_cip: Option<i32>,
    #[serde(rename = "accept_proxy", skip_serializing_if = "Option::is_none")]
    pub accept_proxy: Option<bool>,
    #[serde(rename = "allow_0rtt", skip_serializing_if = "Option::is_none")]
    pub allow_0rtt: Option<bool>,
    #[serde(rename = "alpn", skip_serializing_if = "Option::is_none")]
    pub alpn: Option<String>,
    #[serde(rename = "backlog", skip_serializing_if = "Option::is_none")]
    pub backlog: Option<String>,
    #[serde(rename = "ca_ignore_err", skip_serializing_if = "Option::is_none")]
    pub ca_ignore_err: Option<String>,
    #[serde(rename = "ca_sign_file", skip_serializing_if = "Option::is_none")]
    pub ca_sign_file: Option<String>,
    #[serde(rename = "ca_sign_pass", skip_serializing_if = "Option::is_none")]
    pub ca_sign_pass: Option<String>,
    #[serde(rename = "ca_verify_file", skip_serializing_if = "Option::is_none")]
    pub ca_verify_file: Option<String>,
    #[serde(rename = "ciphers", skip_serializing_if = "Option::is_none")]
    pub ciphers: Option<String>,
    #[serde(rename = "ciphersuites", skip_serializing_if = "Option::is_none")]
    pub ciphersuites: Option<String>,
    #[serde(rename = "client_sigalgs", skip_serializing_if = "Option::is_none")]
    pub client_sigalgs: Option<String>,
    #[serde(rename = "crl_file", skip_serializing_if = "Option::is_none")]
    pub crl_file: Option<String>,
    #[serde(rename = "crt_ignore_err", skip_serializing_if = "Option::is_none")]
    pub crt_ignore_err: Option<String>,
    #[serde(rename = "crt_list", skip_serializing_if = "Option::is_none")]
    pub crt_list: Option<String>,
    #[serde(rename = "curves", skip_serializing_if = "Option::is_none")]
    pub curves: Option<String>,
    #[serde(rename = "defer_accept", skip_serializing_if = "Option::is_none")]
    pub defer_accept: Option<bool>,
    #[serde(rename = "ecdhe", skip_serializing_if = "Option::is_none")]
    pub ecdhe: Option<String>,
    #[serde(rename = "expose_fd_listeners", skip_serializing_if = "Option::is_none")]
    pub expose_fd_listeners: Option<bool>,
    #[serde(rename = "force_sslv3", skip_serializing_if = "Option::is_none")]
    pub force_sslv3: Option<bool>,
    #[serde(rename = "force_tlsv10", skip_serializing_if = "Option::is_none")]
    pub force_tlsv10: Option<bool>,
    #[serde(rename = "force_tlsv11", skip_serializing_if = "Option::is_none")]
    pub force_tlsv11: Option<bool>,
    #[serde(rename = "force_tlsv12", skip_serializing_if = "Option::is_none")]
    pub force_tlsv12: Option<bool>,
    #[serde(rename = "force_tlsv13", skip_serializing_if = "Option::is_none")]
    pub force_tlsv13: Option<bool>,
    #[serde(rename = "generate_certificates", skip_serializing_if = "Option::is_none")]
    pub generate_certificates: Option<bool>,
    #[serde(rename = "gid", skip_serializing_if = "Option::is_none")]
    pub gid: Option<i32>,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "interface", skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<Level>,
    #[serde(rename = "maxconn", skip_serializing_if = "Option::is_none")]
    pub maxconn: Option<i32>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "mss", skip_serializing_if = "Option::is_none")]
    pub mss: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "nbconn", skip_serializing_if = "Option::is_none")]
    pub nbconn: Option<i32>,
    #[serde(rename = "nice", skip_serializing_if = "Option::is_none")]
    pub nice: Option<i32>,
    #[serde(rename = "no_alpn", skip_serializing_if = "Option::is_none")]
    pub no_alpn: Option<bool>,
    #[serde(rename = "no_ca_names", skip_serializing_if = "Option::is_none")]
    pub no_ca_names: Option<bool>,
    #[serde(rename = "no_sslv3", skip_serializing_if = "Option::is_none")]
    pub no_sslv3: Option<bool>,
    #[serde(rename = "no_tls_tickets", skip_serializing_if = "Option::is_none")]
    pub no_tls_tickets: Option<bool>,
    #[serde(rename = "no_tlsv10", skip_serializing_if = "Option::is_none")]
    pub no_tlsv10: Option<bool>,
    #[serde(rename = "no_tlsv11", skip_serializing_if = "Option::is_none")]
    pub no_tlsv11: Option<bool>,
    #[serde(rename = "no_tlsv12", skip_serializing_if = "Option::is_none")]
    pub no_tlsv12: Option<bool>,
    #[serde(rename = "no_tlsv13", skip_serializing_if = "Option::is_none")]
    pub no_tlsv13: Option<bool>,
    #[serde(rename = "npn", skip_serializing_if = "Option::is_none")]
    pub npn: Option<String>,
    #[serde(rename = "prefer_client_ciphers", skip_serializing_if = "Option::is_none")]
    pub prefer_client_ciphers: Option<bool>,
    #[serde(rename = "process", skip_serializing_if = "Option::is_none")]
    pub process: Option<String>,
    #[serde(rename = "proto", skip_serializing_if = "Option::is_none")]
    pub proto: Option<String>,
    #[serde(rename = "quic-cc-algo", skip_serializing_if = "Option::is_none")]
    pub quic_cc_algo: Option<QuicCcAlgo>,
    #[serde(rename = "quic-force-retry", skip_serializing_if = "Option::is_none")]
    pub quic_force_retry: Option<bool>,
    #[serde(rename = "quic-socket", skip_serializing_if = "Option::is_none")]
    pub quic_socket: Option<QuicSocket>,
    #[serde(rename = "severity_output", skip_serializing_if = "Option::is_none")]
    pub severity_output: Option<SeverityOutput>,
    #[serde(rename = "sigalgs", skip_serializing_if = "Option::is_none")]
    pub sigalgs: Option<String>,
    #[serde(rename = "ssl", skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    #[serde(rename = "ssl_cafile", skip_serializing_if = "Option::is_none")]
    pub ssl_cafile: Option<String>,
    #[serde(rename = "ssl_certificate", skip_serializing_if = "Option::is_none")]
    pub ssl_certificate: Option<String>,
    #[serde(rename = "ssl_max_ver", skip_serializing_if = "Option::is_none")]
    pub ssl_max_ver: Option<SslMaxVer>,
    #[serde(rename = "ssl_min_ver", skip_serializing_if = "Option::is_none")]
    pub ssl_min_ver: Option<SslMinVer>,
    #[serde(rename = "strict_sni", skip_serializing_if = "Option::is_none")]
    pub strict_sni: Option<bool>,
    #[serde(rename = "tcp_user_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tcp_user_timeout: Option<Option<i32>>,
    #[serde(rename = "tfo", skip_serializing_if = "Option::is_none")]
    pub tfo: Option<bool>,
    #[serde(rename = "thread", skip_serializing_if = "Option::is_none")]
    pub thread: Option<String>,
    #[serde(rename = "tls_ticket_keys", skip_serializing_if = "Option::is_none")]
    pub tls_ticket_keys: Option<String>,
    #[serde(rename = "transparent", skip_serializing_if = "Option::is_none")]
    pub transparent: Option<bool>,
    #[serde(rename = "uid", skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "v4v6", skip_serializing_if = "Option::is_none")]
    pub v4v6: Option<bool>,
    #[serde(rename = "v6only", skip_serializing_if = "Option::is_none")]
    pub v6only: Option<bool>,
    #[serde(rename = "verify", skip_serializing_if = "Option::is_none")]
    pub verify: Option<Verify>,
}

impl BindParams {
    pub fn new() -> BindParams {
        BindParams {
            accept_netscaler_cip: None,
            accept_proxy: None,
            allow_0rtt: None,
            alpn: None,
            backlog: None,
            ca_ignore_err: None,
            ca_sign_file: None,
            ca_sign_pass: None,
            ca_verify_file: None,
            ciphers: None,
            ciphersuites: None,
            client_sigalgs: None,
            crl_file: None,
            crt_ignore_err: None,
            crt_list: None,
            curves: None,
            defer_accept: None,
            ecdhe: None,
            expose_fd_listeners: None,
            force_sslv3: None,
            force_tlsv10: None,
            force_tlsv11: None,
            force_tlsv12: None,
            force_tlsv13: None,
            generate_certificates: None,
            gid: None,
            group: None,
            id: None,
            interface: None,
            level: None,
            maxconn: None,
            mode: None,
            mss: None,
            name: None,
            namespace: None,
            nbconn: None,
            nice: None,
            no_alpn: None,
            no_ca_names: None,
            no_sslv3: None,
            no_tls_tickets: None,
            no_tlsv10: None,
            no_tlsv11: None,
            no_tlsv12: None,
            no_tlsv13: None,
            npn: None,
            prefer_client_ciphers: None,
            process: None,
            proto: None,
            quic_cc_algo: None,
            quic_force_retry: None,
            quic_socket: None,
            severity_output: None,
            sigalgs: None,
            ssl: None,
            ssl_cafile: None,
            ssl_certificate: None,
            ssl_max_ver: None,
            ssl_min_ver: None,
            strict_sni: None,
            tcp_user_timeout: None,
            tfo: None,
            thread: None,
            tls_ticket_keys: None,
            transparent: None,
            uid: None,
            user: None,
            v4v6: None,
            v6only: None,
            verify: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Level {
    #[serde(rename = "user")]
    User,
    #[serde(rename = "operator")]
    Operator,
    #[serde(rename = "admin")]
    Admin,
}

impl Default for Level {
    fn default() -> Level {
        Self::User
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuicCcAlgo {
    #[serde(rename = "cubic")]
    Cubic,
    #[serde(rename = "newreno")]
    Newreno,
}

impl Default for QuicCcAlgo {
    fn default() -> QuicCcAlgo {
        Self::Cubic
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum QuicSocket {
    #[serde(rename = "connection")]
    Connection,
    #[serde(rename = "listener")]
    Listener,
}

impl Default for QuicSocket {
    fn default() -> QuicSocket {
        Self::Connection
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SeverityOutput {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "string")]
    String,
}

impl Default for SeverityOutput {
    fn default() -> SeverityOutput {
        Self::None
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslMaxVer {
    #[serde(rename = "SSLv3")]
    Sslv3,
    #[serde(rename = "TLSv1.0")]
    Tlsv1Period0,
    #[serde(rename = "TLSv1.1")]
    Tlsv1Period1,
    #[serde(rename = "TLSv1.2")]
    Tlsv1Period2,
    #[serde(rename = "TLSv1.3")]
    Tlsv1Period3,
}

impl Default for SslMaxVer {
    fn default() -> SslMaxVer {
        Self::Sslv3
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SslMinVer {
    #[serde(rename = "SSLv3")]
    Sslv3,
    #[serde(rename = "TLSv1.0")]
    Tlsv1Period0,
    #[serde(rename = "TLSv1.1")]
    Tlsv1Period1,
    #[serde(rename = "TLSv1.2")]
    Tlsv1Period2,
    #[serde(rename = "TLSv1.3")]
    Tlsv1Period3,
}

impl Default for SslMinVer {
    fn default() -> SslMinVer {
        Self::Sslv3
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Verify {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "optional")]
    Optional,
    #[serde(rename = "required")]
    Required,
}

impl Default for Verify {
    fn default() -> Verify {
        Self::None
    }
}

