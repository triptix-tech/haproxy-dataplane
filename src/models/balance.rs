/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Balance {
    #[serde(rename = "algorithm")]
    pub algorithm: Algorithm,
    #[serde(rename = "hash_expression", skip_serializing_if = "Option::is_none")]
    pub hash_expression: Option<String>,
    #[serde(rename = "hdr_name", skip_serializing_if = "Option::is_none")]
    pub hdr_name: Option<String>,
    #[serde(rename = "hdr_use_domain_only", skip_serializing_if = "Option::is_none")]
    pub hdr_use_domain_only: Option<bool>,
    #[serde(rename = "random_draws", skip_serializing_if = "Option::is_none")]
    pub random_draws: Option<i32>,
    #[serde(rename = "rdp_cookie_name", skip_serializing_if = "Option::is_none")]
    pub rdp_cookie_name: Option<String>,
    #[serde(rename = "uri_depth", skip_serializing_if = "Option::is_none")]
    pub uri_depth: Option<i32>,
    #[serde(rename = "uri_len", skip_serializing_if = "Option::is_none")]
    pub uri_len: Option<i32>,
    #[serde(rename = "uri_path_only", skip_serializing_if = "Option::is_none")]
    pub uri_path_only: Option<bool>,
    #[serde(rename = "uri_whole", skip_serializing_if = "Option::is_none")]
    pub uri_whole: Option<bool>,
    #[serde(rename = "url_param", skip_serializing_if = "Option::is_none")]
    pub url_param: Option<String>,
    #[serde(rename = "url_param_check_post", skip_serializing_if = "Option::is_none")]
    pub url_param_check_post: Option<i32>,
    #[serde(rename = "url_param_max_wait", skip_serializing_if = "Option::is_none")]
    pub url_param_max_wait: Option<i32>,
}

impl Balance {
    pub fn new(algorithm: Algorithm) -> Balance {
        Balance {
            algorithm,
            hash_expression: None,
            hdr_name: None,
            hdr_use_domain_only: None,
            random_draws: None,
            rdp_cookie_name: None,
            uri_depth: None,
            uri_len: None,
            uri_path_only: None,
            uri_whole: None,
            url_param: None,
            url_param_check_post: None,
            url_param_max_wait: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Algorithm {
    #[serde(rename = "roundrobin")]
    Roundrobin,
    #[serde(rename = "static-rr")]
    StaticRr,
    #[serde(rename = "leastconn")]
    Leastconn,
    #[serde(rename = "first")]
    First,
    #[serde(rename = "source")]
    Source,
    #[serde(rename = "uri")]
    Uri,
    #[serde(rename = "url_param")]
    UrlParam,
    #[serde(rename = "hdr")]
    Hdr,
    #[serde(rename = "random")]
    Random,
    #[serde(rename = "rdp-cookie")]
    RdpCookie,
    #[serde(rename = "hash")]
    Hash,
}

impl Default for Algorithm {
    fn default() -> Algorithm {
        Self::Roundrobin
    }
}

