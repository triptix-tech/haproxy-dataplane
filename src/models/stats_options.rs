/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatsOptions {
    #[serde(rename = "stats_admin", skip_serializing_if = "Option::is_none")]
    pub stats_admin: Option<bool>,
    #[serde(rename = "stats_admin_cond", skip_serializing_if = "Option::is_none")]
    pub stats_admin_cond: Option<StatsAdminCond>,
    #[serde(rename = "stats_admin_cond_test", skip_serializing_if = "Option::is_none")]
    pub stats_admin_cond_test: Option<String>,
    #[serde(rename = "stats_auths", skip_serializing_if = "Option::is_none")]
    pub stats_auths: Option<Vec<crate::models::StatsAuth>>,
    #[serde(rename = "stats_enable", skip_serializing_if = "Option::is_none")]
    pub stats_enable: Option<bool>,
    #[serde(rename = "stats_hide_version", skip_serializing_if = "Option::is_none")]
    pub stats_hide_version: Option<bool>,
    #[serde(rename = "stats_http_requests", skip_serializing_if = "Option::is_none")]
    pub stats_http_requests: Option<Vec<crate::models::StatsHttpRequest>>,
    #[serde(rename = "stats_maxconn", skip_serializing_if = "Option::is_none")]
    pub stats_maxconn: Option<i32>,
    #[serde(rename = "stats_realm", skip_serializing_if = "Option::is_none")]
    pub stats_realm: Option<bool>,
    #[serde(rename = "stats_realm_realm", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stats_realm_realm: Option<Option<String>>,
    #[serde(rename = "stats_refresh_delay", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stats_refresh_delay: Option<Option<i32>>,
    #[serde(rename = "stats_show_desc", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stats_show_desc: Option<Option<String>>,
    #[serde(rename = "stats_show_legends", skip_serializing_if = "Option::is_none")]
    pub stats_show_legends: Option<bool>,
    #[serde(rename = "stats_show_modules", skip_serializing_if = "Option::is_none")]
    pub stats_show_modules: Option<bool>,
    #[serde(rename = "stats_show_node_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stats_show_node_name: Option<Option<String>>,
    #[serde(rename = "stats_uri_prefix", skip_serializing_if = "Option::is_none")]
    pub stats_uri_prefix: Option<String>,
}

impl StatsOptions {
    pub fn new() -> StatsOptions {
        StatsOptions {
            stats_admin: None,
            stats_admin_cond: None,
            stats_admin_cond_test: None,
            stats_auths: None,
            stats_enable: None,
            stats_hide_version: None,
            stats_http_requests: None,
            stats_maxconn: None,
            stats_realm: None,
            stats_realm_realm: None,
            stats_refresh_delay: None,
            stats_show_desc: None,
            stats_show_legends: None,
            stats_show_modules: None,
            stats_show_node_name: None,
            stats_uri_prefix: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StatsAdminCond {
    #[serde(rename = "if")]
    If,
    #[serde(rename = "unless")]
    Unless,
}

impl Default for StatsAdminCond {
    fn default() -> StatsAdminCond {
        Self::If
    }
}

