/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// HttpErrorRule : HAProxy HTTP error rule configuration (corresponds to http-error directives)



#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HttpErrorRule {
    #[serde(rename = "index", deserialize_with = "Option::deserialize")]
    pub index: Option<i32>,
    #[serde(rename = "return_content", skip_serializing_if = "Option::is_none")]
    pub return_content: Option<String>,
    #[serde(rename = "return_content_format", skip_serializing_if = "Option::is_none")]
    pub return_content_format: Option<ReturnContentFormat>,
    #[serde(rename = "return_content_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub return_content_type: Option<Option<String>>,
    #[serde(rename = "return_hdrs", skip_serializing_if = "Option::is_none")]
    pub return_hdrs: Option<Vec<crate::models::ReturnHeader>>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl HttpErrorRule {
    /// HAProxy HTTP error rule configuration (corresponds to http-error directives)
    pub fn new(index: Option<i32>, status: Status, r#type: Type) -> HttpErrorRule {
        HttpErrorRule {
            index,
            return_content: None,
            return_content_format: None,
            return_content_type: None,
            return_hdrs: None,
            status,
            r#type,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReturnContentFormat {
    #[serde(rename = "default-errorfiles")]
    DefaultErrorfiles,
    #[serde(rename = "errorfile")]
    Errorfile,
    #[serde(rename = "errorfiles")]
    Errorfiles,
    #[serde(rename = "file")]
    File,
    #[serde(rename = "lf-file")]
    LfFile,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "lf-string")]
    LfString,
}

impl Default for ReturnContentFormat {
    fn default() -> ReturnContentFormat {
        Self::DefaultErrorfiles
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "200")]
    Variant200,
    #[serde(rename = "400")]
    Variant400,
    #[serde(rename = "401")]
    Variant401,
    #[serde(rename = "403")]
    Variant403,
    #[serde(rename = "404")]
    Variant404,
    #[serde(rename = "405")]
    Variant405,
    #[serde(rename = "407")]
    Variant407,
    #[serde(rename = "408")]
    Variant408,
    #[serde(rename = "410")]
    Variant410,
    #[serde(rename = "413")]
    Variant413,
    #[serde(rename = "425")]
    Variant425,
    #[serde(rename = "429")]
    Variant429,
    #[serde(rename = "500")]
    Variant500,
    #[serde(rename = "501")]
    Variant501,
    #[serde(rename = "502")]
    Variant502,
    #[serde(rename = "503")]
    Variant503,
    #[serde(rename = "504")]
    Variant504,
}

impl Default for Status {
    fn default() -> Status {
        Self::Variant200
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "status")]
    Status,
}

impl Default for Type {
    fn default() -> Type {
        Self::Status
    }
}

