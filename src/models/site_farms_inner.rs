/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SiteFarmsInner {
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<Box<crate::models::Balance>>,
    #[serde(rename = "cond", skip_serializing_if = "Option::is_none")]
    pub cond: Option<Cond>,
    #[serde(rename = "cond_test", skip_serializing_if = "Option::is_none")]
    pub cond_test: Option<String>,
    #[serde(rename = "forwardfor", skip_serializing_if = "Option::is_none")]
    pub forwardfor: Option<Box<crate::models::Forwardfor>>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "servers", skip_serializing_if = "Option::is_none")]
    pub servers: Option<Vec<crate::models::Server>>,
    #[serde(rename = "use_as")]
    pub use_as: UseAs,
}

impl SiteFarmsInner {
    pub fn new(name: String, use_as: UseAs) -> SiteFarmsInner {
        SiteFarmsInner {
            balance: None,
            cond: None,
            cond_test: None,
            forwardfor: None,
            mode: None,
            name,
            servers: None,
            use_as,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cond {
    #[serde(rename = "if")]
    If,
    #[serde(rename = "unless")]
    Unless,
}

impl Default for Cond {
    fn default() -> Cond {
        Self::If
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "tcp")]
    Tcp,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Http
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UseAs {
    #[serde(rename = "default")]
    Default,
    #[serde(rename = "conditional")]
    Conditional,
}

impl Default for UseAs {
    fn default() -> UseAs {
        Self::Default
    }
}

