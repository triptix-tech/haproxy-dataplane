/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct HttpCheck {
    #[serde(rename = "addr", skip_serializing_if = "Option::is_none")]
    pub addr: Option<String>,
    #[serde(rename = "alpn", skip_serializing_if = "Option::is_none")]
    pub alpn: Option<String>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "body_log_format", skip_serializing_if = "Option::is_none")]
    pub body_log_format: Option<String>,
    #[serde(rename = "check_comment", skip_serializing_if = "Option::is_none")]
    pub check_comment: Option<String>,
    #[serde(rename = "default", skip_serializing_if = "Option::is_none")]
    pub default: Option<bool>,
    #[serde(rename = "error_status", skip_serializing_if = "Option::is_none")]
    pub error_status: Option<ErrorStatus>,
    #[serde(rename = "exclamation_mark", skip_serializing_if = "Option::is_none")]
    pub exclamation_mark: Option<bool>,
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<crate::models::ReturnHeader>>,
    #[serde(rename = "index", deserialize_with = "Option::deserialize")]
    pub index: Option<i32>,
    #[serde(rename = "linger", skip_serializing_if = "Option::is_none")]
    pub linger: Option<bool>,
    #[serde(rename = "match", skip_serializing_if = "Option::is_none")]
    pub r#match: Option<Match>,
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<Method>,
    #[serde(rename = "min_recv", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub min_recv: Option<Option<i32>>,
    #[serde(rename = "ok_status", skip_serializing_if = "Option::is_none")]
    pub ok_status: Option<OkStatus>,
    #[serde(rename = "on_error", skip_serializing_if = "Option::is_none")]
    pub on_error: Option<String>,
    #[serde(rename = "on_success", skip_serializing_if = "Option::is_none")]
    pub on_success: Option<String>,
    #[serde(rename = "pattern", skip_serializing_if = "Option::is_none")]
    pub pattern: Option<String>,
    #[serde(rename = "port", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub port: Option<Option<i32>>,
    #[serde(rename = "port_string", skip_serializing_if = "Option::is_none")]
    pub port_string: Option<String>,
    #[serde(rename = "proto", skip_serializing_if = "Option::is_none")]
    pub proto: Option<String>,
    #[serde(rename = "send_proxy", skip_serializing_if = "Option::is_none")]
    pub send_proxy: Option<bool>,
    #[serde(rename = "sni", skip_serializing_if = "Option::is_none")]
    pub sni: Option<String>,
    #[serde(rename = "ssl", skip_serializing_if = "Option::is_none")]
    pub ssl: Option<bool>,
    #[serde(rename = "status-code", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<String>,
    #[serde(rename = "tout_status", skip_serializing_if = "Option::is_none")]
    pub tout_status: Option<ToutStatus>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "uri_log_format", skip_serializing_if = "Option::is_none")]
    pub uri_log_format: Option<String>,
    #[serde(rename = "var_expr", skip_serializing_if = "Option::is_none")]
    pub var_expr: Option<String>,
    #[serde(rename = "var_format", skip_serializing_if = "Option::is_none")]
    pub var_format: Option<String>,
    #[serde(rename = "var_name", skip_serializing_if = "Option::is_none")]
    pub var_name: Option<String>,
    #[serde(rename = "var_scope", skip_serializing_if = "Option::is_none")]
    pub var_scope: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "via_socks4", skip_serializing_if = "Option::is_none")]
    pub via_socks4: Option<bool>,
}

impl HttpCheck {
    pub fn new(index: Option<i32>, r#type: Type) -> HttpCheck {
        HttpCheck {
            addr: None,
            alpn: None,
            body: None,
            body_log_format: None,
            check_comment: None,
            default: None,
            error_status: None,
            exclamation_mark: None,
            headers: None,
            index,
            linger: None,
            r#match: None,
            method: None,
            min_recv: None,
            ok_status: None,
            on_error: None,
            on_success: None,
            pattern: None,
            port: None,
            port_string: None,
            proto: None,
            send_proxy: None,
            sni: None,
            ssl: None,
            status_code: None,
            tout_status: None,
            r#type,
            uri: None,
            uri_log_format: None,
            var_expr: None,
            var_format: None,
            var_name: None,
            var_scope: None,
            version: None,
            via_socks4: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ErrorStatus {
    #[serde(rename = "L7OKC")]
    L7Okc,
    #[serde(rename = "L7RSP")]
    L7Rsp,
    #[serde(rename = "L7STS")]
    L7Sts,
    #[serde(rename = "L6RSP")]
    L6Rsp,
    #[serde(rename = "L4CON")]
    L4Con,
}

impl Default for ErrorStatus {
    fn default() -> ErrorStatus {
        Self::L7Okc
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Match {
    #[serde(rename = "status")]
    Status,
    #[serde(rename = "rstatus")]
    Rstatus,
    #[serde(rename = "hdr")]
    Hdr,
    #[serde(rename = "fhdr")]
    Fhdr,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "rstring")]
    Rstring,
}

impl Default for Match {
    fn default() -> Match {
        Self::Status
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Method {
    #[serde(rename = "HEAD")]
    Head,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "TRACE")]
    Trace,
    #[serde(rename = "PATCH")]
    Patch,
    #[serde(rename = "DELETE")]
    Delete,
    #[serde(rename = "CONNECT")]
    Connect,
    #[serde(rename = "OPTIONS")]
    Options,
}

impl Default for Method {
    fn default() -> Method {
        Self::Head
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum OkStatus {
    #[serde(rename = "L7OK")]
    L7Ok,
    #[serde(rename = "L7OKC")]
    L7Okc,
    #[serde(rename = "L6OK")]
    L6Ok,
    #[serde(rename = "L4OK")]
    L4Ok,
}

impl Default for OkStatus {
    fn default() -> OkStatus {
        Self::L7Ok
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ToutStatus {
    #[serde(rename = "L7TOUT")]
    L7Tout,
    #[serde(rename = "L6TOUT")]
    L6Tout,
    #[serde(rename = "L4TOUT")]
    L4Tout,
}

impl Default for ToutStatus {
    fn default() -> ToutStatus {
        Self::L7Tout
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "comment")]
    Comment,
    #[serde(rename = "connect")]
    Connect,
    #[serde(rename = "disable-on-404")]
    DisableOn404,
    #[serde(rename = "expect")]
    Expect,
    #[serde(rename = "send")]
    Send,
    #[serde(rename = "send-state")]
    SendState,
    #[serde(rename = "set-var")]
    SetVar,
    #[serde(rename = "set-var-fmt")]
    SetVarFmt,
    #[serde(rename = "unset-var")]
    UnsetVar,
}

impl Default for Type {
    fn default() -> Type {
        Self::Comment
    }
}

