/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// FcgiApp : HAProxy FastCGI application configuration



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct FcgiApp {
    /// Defines the document root on the remote host. The parameter serves to build the default value of FastCGI parameters SCRIPT_FILENAME and PATH_TRANSLATED. It is a mandatory setting.
    #[serde(rename = "docroot")]
    pub docroot: String,
    /// Enables or disables the retrieval of variables related to connection management.
    #[serde(rename = "get_values", skip_serializing_if = "Option::is_none")]
    pub get_values: Option<GetValues>,
    /// Defines the script name to append after a URI that ends with a slash (\"/\") to set the default value for the FastCGI parameter SCRIPT_NAME. It is an optional setting.
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    /// Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
    #[serde(rename = "keep_conn", skip_serializing_if = "Option::is_none")]
    pub keep_conn: Option<KeepConn>,
    #[serde(rename = "log_stderrs", skip_serializing_if = "Option::is_none")]
    pub log_stderrs: Option<Vec<crate::models::FcgiLogStderr>>,
    /// Defines the maximum number of concurrent requests this application can accept. If the FastCGI application retrieves the variable FCGI_MAX_REQS during connection establishment, it can override this option. Furthermore, if the application does not do multiplexing, it will ignore this option.
    #[serde(rename = "max_reqs", skip_serializing_if = "Option::is_none")]
    pub max_reqs: Option<i32>,
    /// Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
    #[serde(rename = "mpxs_conns", skip_serializing_if = "Option::is_none")]
    pub mpxs_conns: Option<MpxsConns>,
    /// Declares a FastCGI application
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "pass_headers", skip_serializing_if = "Option::is_none")]
    pub pass_headers: Option<Vec<crate::models::FcgiPassHeader>>,
    /// Defines a regular expression to extract the script-name and the path-info from the URI. Thus, <regex> must have two captures: the first to capture the script name, and the second to capture the path- info. If not defined, it does not perform matching on the URI, and does not fill the FastCGI parameters PATH_INFO and PATH_TRANSLATED.
    #[serde(rename = "path_info", skip_serializing_if = "Option::is_none")]
    pub path_info: Option<String>,
    #[serde(rename = "set_params", skip_serializing_if = "Option::is_none")]
    pub set_params: Option<Vec<crate::models::FcgiSetParam>>,
}

impl FcgiApp {
    /// HAProxy FastCGI application configuration
    pub fn new(docroot: String, name: String) -> FcgiApp {
        FcgiApp {
            docroot,
            get_values: None,
            index: None,
            keep_conn: None,
            log_stderrs: None,
            max_reqs: None,
            mpxs_conns: None,
            name,
            pass_headers: None,
            path_info: None,
            set_params: None,
        }
    }
}

/// Enables or disables the retrieval of variables related to connection management.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GetValues {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for GetValues {
    fn default() -> GetValues {
        Self::Enabled
    }
}
/// Tells the FastCGI application whether or not to keep the connection open after it sends a response. If disabled, the FastCGI application closes the connection after responding to this request.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum KeepConn {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for KeepConn {
    fn default() -> KeepConn {
        Self::Enabled
    }
}
/// Enables or disables the support of connection multiplexing. If the FastCGI application retrieves the variable FCGI_MPXS_CONNS during connection establishment, it can override this option.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MpxsConns {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for MpxsConns {
    fn default() -> MpxsConns {
        Self::Enabled
    }
}

