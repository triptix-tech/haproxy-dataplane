/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// PeerSection : HAProxy peer_section configuration



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PeerSection {
    #[serde(rename = "default_bind", skip_serializing_if = "Option::is_none")]
    pub default_bind: Option<Box<crate::models::DefaultBind>>,
    #[serde(rename = "default_server", skip_serializing_if = "Option::is_none")]
    pub default_server: Option<Box<crate::models::DefaultServer>>,
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "name")]
    pub name: String,
    /// In some configurations, one would like to distribute the stick-table contents to some peers in place of sending all the stick-table contents to each peer declared in the \"peers\" section. In such cases, \"shards\" specifies the number of peer involved in this stick-table contents distribution.
    #[serde(rename = "shards", skip_serializing_if = "Option::is_none")]
    pub shards: Option<i32>,
}

impl PeerSection {
    /// HAProxy peer_section configuration
    pub fn new(name: String) -> PeerSection {
        PeerSection {
            default_bind: None,
            default_server: None,
            disabled: None,
            enabled: None,
            name,
            shards: None,
        }
    }
}


