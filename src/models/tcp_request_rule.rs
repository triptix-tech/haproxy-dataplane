/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// TcpRequestRule : HAProxy TCP Request Rule configuration (corresponds to tcp-request)



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TcpRequestRule {
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    #[serde(rename = "bandwidth_limit_limit", skip_serializing_if = "Option::is_none")]
    pub bandwidth_limit_limit: Option<String>,
    #[serde(rename = "bandwidth_limit_name", skip_serializing_if = "Option::is_none")]
    pub bandwidth_limit_name: Option<String>,
    #[serde(rename = "bandwidth_limit_period", skip_serializing_if = "Option::is_none")]
    pub bandwidth_limit_period: Option<String>,
    #[serde(rename = "capture_len", skip_serializing_if = "Option::is_none")]
    pub capture_len: Option<i32>,
    #[serde(rename = "capture_sample", skip_serializing_if = "Option::is_none")]
    pub capture_sample: Option<String>,
    #[serde(rename = "cond", skip_serializing_if = "Option::is_none")]
    pub cond: Option<Cond>,
    #[serde(rename = "cond_test", skip_serializing_if = "Option::is_none")]
    pub cond_test: Option<String>,
    #[serde(rename = "expr", skip_serializing_if = "Option::is_none")]
    pub expr: Option<String>,
    #[serde(rename = "gpt_value", skip_serializing_if = "Option::is_none")]
    pub gpt_value: Option<String>,
    #[serde(rename = "index", deserialize_with = "Option::deserialize")]
    pub index: Option<i32>,
    #[serde(rename = "log_level", skip_serializing_if = "Option::is_none")]
    pub log_level: Option<LogLevel>,
    #[serde(rename = "lua_action", skip_serializing_if = "Option::is_none")]
    pub lua_action: Option<String>,
    #[serde(rename = "lua_params", skip_serializing_if = "Option::is_none")]
    pub lua_params: Option<String>,
    #[serde(rename = "mark_value", skip_serializing_if = "Option::is_none")]
    pub mark_value: Option<String>,
    #[serde(rename = "nice_value", skip_serializing_if = "Option::is_none")]
    pub nice_value: Option<i32>,
    #[serde(rename = "priority_type", skip_serializing_if = "Option::is_none")]
    pub priority_type: Option<PriorityType>,
    #[serde(rename = "resolve_protocol", skip_serializing_if = "Option::is_none")]
    pub resolve_protocol: Option<ResolveProtocol>,
    #[serde(rename = "resolve_resolvers", skip_serializing_if = "Option::is_none")]
    pub resolve_resolvers: Option<String>,
    #[serde(rename = "resolve_var", skip_serializing_if = "Option::is_none")]
    pub resolve_var: Option<String>,
    #[serde(rename = "sc_idx", skip_serializing_if = "Option::is_none")]
    pub sc_idx: Option<String>,
    #[serde(rename = "sc_inc_id", skip_serializing_if = "Option::is_none")]
    pub sc_inc_id: Option<String>,
    #[serde(rename = "sc_int", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sc_int: Option<Option<i32>>,
    #[serde(rename = "server_name", skip_serializing_if = "Option::is_none")]
    pub server_name: Option<String>,
    #[serde(rename = "service_name", skip_serializing_if = "Option::is_none")]
    pub service_name: Option<String>,
    #[serde(rename = "spoe_engine_name", skip_serializing_if = "Option::is_none")]
    pub spoe_engine_name: Option<String>,
    #[serde(rename = "spoe_group_name", skip_serializing_if = "Option::is_none")]
    pub spoe_group_name: Option<String>,
    #[serde(rename = "switch_mode_proto", skip_serializing_if = "Option::is_none")]
    pub switch_mode_proto: Option<String>,
    #[serde(rename = "timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timeout: Option<Option<i32>>,
    #[serde(rename = "tos_value", skip_serializing_if = "Option::is_none")]
    pub tos_value: Option<String>,
    #[serde(rename = "track_key", skip_serializing_if = "Option::is_none")]
    pub track_key: Option<String>,
    #[serde(rename = "track_stick_counter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub track_stick_counter: Option<Option<i32>>,
    #[serde(rename = "track_table", skip_serializing_if = "Option::is_none")]
    pub track_table: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "var_format", skip_serializing_if = "Option::is_none")]
    pub var_format: Option<String>,
    #[serde(rename = "var_name", skip_serializing_if = "Option::is_none")]
    pub var_name: Option<String>,
    #[serde(rename = "var_scope", skip_serializing_if = "Option::is_none")]
    pub var_scope: Option<String>,
}

impl TcpRequestRule {
    /// HAProxy TCP Request Rule configuration (corresponds to tcp-request)
    pub fn new(index: Option<i32>, r#type: Type) -> TcpRequestRule {
        TcpRequestRule {
            action: None,
            bandwidth_limit_limit: None,
            bandwidth_limit_name: None,
            bandwidth_limit_period: None,
            capture_len: None,
            capture_sample: None,
            cond: None,
            cond_test: None,
            expr: None,
            gpt_value: None,
            index,
            log_level: None,
            lua_action: None,
            lua_params: None,
            mark_value: None,
            nice_value: None,
            priority_type: None,
            resolve_protocol: None,
            resolve_resolvers: None,
            resolve_var: None,
            sc_idx: None,
            sc_inc_id: None,
            sc_int: None,
            server_name: None,
            service_name: None,
            spoe_engine_name: None,
            spoe_group_name: None,
            switch_mode_proto: None,
            timeout: None,
            tos_value: None,
            track_key: None,
            track_stick_counter: None,
            track_table: None,
            r#type,
            var_format: None,
            var_name: None,
            var_scope: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "accept")]
    Accept,
    #[serde(rename = "attach-srv")]
    AttachSrv,
    #[serde(rename = "capture")]
    Capture,
    #[serde(rename = "do-resolve")]
    DoResolve,
    #[serde(rename = "expect-netscaler-cip")]
    ExpectNetscalerCip,
    #[serde(rename = "expect-proxy")]
    ExpectProxy,
    #[serde(rename = "reject")]
    Reject,
    #[serde(rename = "sc-add-gpc")]
    ScAddGpc,
    #[serde(rename = "sc-inc-gpc")]
    ScIncGpc,
    #[serde(rename = "sc-inc-gpc0")]
    ScIncGpc0,
    #[serde(rename = "sc-inc-gpc1")]
    ScIncGpc1,
    #[serde(rename = "sc-set-gpt0")]
    ScSetGpt0,
    #[serde(rename = "send-spoe-group")]
    SendSpoeGroup,
    #[serde(rename = "set-dst-port")]
    SetDstPort,
    #[serde(rename = "set-dst")]
    SetDst,
    #[serde(rename = "set-priority")]
    SetPriority,
    #[serde(rename = "set-src")]
    SetSrc,
    #[serde(rename = "set-var")]
    SetVar,
    #[serde(rename = "silent-drop")]
    SilentDrop,
    #[serde(rename = "track-sc0")]
    TrackSc0,
    #[serde(rename = "track-sc1")]
    TrackSc1,
    #[serde(rename = "track-sc2")]
    TrackSc2,
    #[serde(rename = "track-sc")]
    TrackSc,
    #[serde(rename = "unset-var")]
    UnsetVar,
    #[serde(rename = "use-service")]
    UseService,
    #[serde(rename = "lua")]
    Lua,
    #[serde(rename = "set-bandwidth-limit")]
    SetBandwidthLimit,
    #[serde(rename = "set-src-port")]
    SetSrcPort,
    #[serde(rename = "set-mark")]
    SetMark,
    #[serde(rename = "set-tos")]
    SetTos,
    #[serde(rename = "set-var-fmt")]
    SetVarFmt,
    #[serde(rename = "set-log-level")]
    SetLogLevel,
    #[serde(rename = "set-nice")]
    SetNice,
    #[serde(rename = "switch-mode")]
    SwitchMode,
}

impl Default for Action {
    fn default() -> Action {
        Self::Accept
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cond {
    #[serde(rename = "if")]
    If,
    #[serde(rename = "unless")]
    Unless,
}

impl Default for Cond {
    fn default() -> Cond {
        Self::If
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogLevel {
    #[serde(rename = "emerg")]
    Emerg,
    #[serde(rename = "alert")]
    Alert,
    #[serde(rename = "crit")]
    Crit,
    #[serde(rename = "err")]
    Err,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "notice")]
    Notice,
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "debug")]
    Debug,
    #[serde(rename = "silent")]
    Silent,
}

impl Default for LogLevel {
    fn default() -> LogLevel {
        Self::Emerg
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PriorityType {
    #[serde(rename = "class")]
    Class,
    #[serde(rename = "offset")]
    Offset,
}

impl Default for PriorityType {
    fn default() -> PriorityType {
        Self::Class
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResolveProtocol {
    #[serde(rename = "ipv4")]
    Ipv4,
    #[serde(rename = "ipv6")]
    Ipv6,
}

impl Default for ResolveProtocol {
    fn default() -> ResolveProtocol {
        Self::Ipv4
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "connection")]
    Connection,
    #[serde(rename = "content")]
    Content,
    #[serde(rename = "inspect-delay")]
    InspectDelay,
    #[serde(rename = "session")]
    Session,
}

impl Default for Type {
    fn default() -> Type {
        Self::Connection
    }
}

