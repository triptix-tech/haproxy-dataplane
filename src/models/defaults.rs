/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */

/// Defaults : HAProxy defaults configuration



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Defaults {
    #[serde(rename = "abortonclose", skip_serializing_if = "Option::is_none")]
    pub abortonclose: Option<Abortonclose>,
    #[serde(rename = "accept_invalid_http_request", skip_serializing_if = "Option::is_none")]
    pub accept_invalid_http_request: Option<AcceptInvalidHttpRequest>,
    #[serde(rename = "accept_invalid_http_response", skip_serializing_if = "Option::is_none")]
    pub accept_invalid_http_response: Option<AcceptInvalidHttpResponse>,
    #[serde(rename = "adv_check", skip_serializing_if = "Option::is_none")]
    pub adv_check: Option<AdvCheck>,
    #[serde(rename = "allbackups", skip_serializing_if = "Option::is_none")]
    pub allbackups: Option<Allbackups>,
    #[serde(rename = "backlog", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub backlog: Option<Option<i32>>,
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<Box<crate::models::Balance>>,
    #[serde(rename = "bind_process", skip_serializing_if = "Option::is_none")]
    pub bind_process: Option<String>,
    #[serde(rename = "check_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub check_timeout: Option<Option<i32>>,
    #[serde(rename = "checkcache", skip_serializing_if = "Option::is_none")]
    pub checkcache: Option<Checkcache>,
    #[serde(rename = "clflog", skip_serializing_if = "Option::is_none")]
    pub clflog: Option<bool>,
    #[serde(rename = "client_fin_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_fin_timeout: Option<Option<i32>>,
    #[serde(rename = "client_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_timeout: Option<Option<i32>>,
    #[serde(rename = "clitcpka", skip_serializing_if = "Option::is_none")]
    pub clitcpka: Option<Clitcpka>,
    #[serde(rename = "clitcpka_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clitcpka_cnt: Option<Option<i32>>,
    #[serde(rename = "clitcpka_idle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clitcpka_idle: Option<Option<i32>>,
    #[serde(rename = "clitcpka_intvl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub clitcpka_intvl: Option<Option<i32>>,
    #[serde(rename = "compression", skip_serializing_if = "Option::is_none")]
    pub compression: Option<Box<crate::models::Compression>>,
    #[serde(rename = "connect_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connect_timeout: Option<Option<i32>>,
    #[serde(rename = "contstats", skip_serializing_if = "Option::is_none")]
    pub contstats: Option<Contstats>,
    #[serde(rename = "cookie", skip_serializing_if = "Option::is_none")]
    pub cookie: Option<Box<crate::models::Cookie>>,
    #[serde(rename = "default_backend", skip_serializing_if = "Option::is_none")]
    pub default_backend: Option<String>,
    #[serde(rename = "default_server", skip_serializing_if = "Option::is_none")]
    pub default_server: Option<Box<crate::models::DefaultServer>>,
    #[serde(rename = "disable_h2_upgrade", skip_serializing_if = "Option::is_none")]
    pub disable_h2_upgrade: Option<DisableH2Upgrade>,
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(rename = "dontlog_normal", skip_serializing_if = "Option::is_none")]
    pub dontlog_normal: Option<DontlogNormal>,
    #[serde(rename = "dontlognull", skip_serializing_if = "Option::is_none")]
    pub dontlognull: Option<Dontlognull>,
    #[serde(rename = "dynamic_cookie_key", skip_serializing_if = "Option::is_none")]
    pub dynamic_cookie_key: Option<String>,
    #[serde(rename = "email_alert", skip_serializing_if = "Option::is_none")]
    pub email_alert: Option<Box<crate::models::EmailAlert>>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "error_files", skip_serializing_if = "Option::is_none")]
    pub error_files: Option<Vec<crate::models::Errorfile>>,
    #[serde(rename = "error_log_format", skip_serializing_if = "Option::is_none")]
    pub error_log_format: Option<String>,
    #[serde(rename = "errorfiles_from_http_errors", skip_serializing_if = "Option::is_none")]
    pub errorfiles_from_http_errors: Option<Vec<crate::models::Errorfiles>>,
    #[serde(rename = "errorloc302", skip_serializing_if = "Option::is_none")]
    pub errorloc302: Option<Box<crate::models::Errorloc>>,
    #[serde(rename = "errorloc303", skip_serializing_if = "Option::is_none")]
    pub errorloc303: Option<Box<crate::models::Errorloc>>,
    #[serde(rename = "external_check", skip_serializing_if = "Option::is_none")]
    pub external_check: Option<ExternalCheck>,
    #[serde(rename = "external_check_command", skip_serializing_if = "Option::is_none")]
    pub external_check_command: Option<String>,
    #[serde(rename = "external_check_path", skip_serializing_if = "Option::is_none")]
    pub external_check_path: Option<String>,
    #[serde(rename = "forwardfor", skip_serializing_if = "Option::is_none")]
    pub forwardfor: Option<Box<crate::models::Forwardfor>>,
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    #[serde(rename = "fullconn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fullconn: Option<Option<i32>>,
    #[serde(rename = "h1_case_adjust_bogus_client", skip_serializing_if = "Option::is_none")]
    pub h1_case_adjust_bogus_client: Option<H1CaseAdjustBogusClient>,
    #[serde(rename = "h1_case_adjust_bogus_server", skip_serializing_if = "Option::is_none")]
    pub h1_case_adjust_bogus_server: Option<H1CaseAdjustBogusServer>,
    #[serde(rename = "hash_type", skip_serializing_if = "Option::is_none")]
    pub hash_type: Option<Box<crate::models::HashType>>,
    #[serde(rename = "http-buffer-request", skip_serializing_if = "Option::is_none")]
    pub http_buffer_request: Option<HttpBufferRequest>,
    #[serde(rename = "http-check", skip_serializing_if = "Option::is_none")]
    pub http_check: Option<Box<crate::models::HttpCheck>>,
    #[serde(rename = "http-use-htx", skip_serializing_if = "Option::is_none")]
    pub http_use_htx: Option<HttpUseHtx>,
    #[serde(rename = "http_connection_mode", skip_serializing_if = "Option::is_none")]
    pub http_connection_mode: Option<HttpConnectionMode>,
    #[serde(rename = "http_ignore_probes", skip_serializing_if = "Option::is_none")]
    pub http_ignore_probes: Option<HttpIgnoreProbes>,
    #[serde(rename = "http_keep_alive_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_keep_alive_timeout: Option<Option<i32>>,
    #[serde(rename = "http_no_delay", skip_serializing_if = "Option::is_none")]
    pub http_no_delay: Option<HttpNoDelay>,
    #[serde(rename = "http_pretend_keepalive", skip_serializing_if = "Option::is_none")]
    pub http_pretend_keepalive: Option<HttpPretendKeepalive>,
    #[serde(rename = "http_request_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_request_timeout: Option<Option<i32>>,
    #[serde(rename = "http_restrict_req_hdr_names", skip_serializing_if = "Option::is_none")]
    pub http_restrict_req_hdr_names: Option<HttpRestrictReqHdrNames>,
    #[serde(rename = "http_reuse", skip_serializing_if = "Option::is_none")]
    pub http_reuse: Option<HttpReuse>,
    #[serde(rename = "http_send_name_header", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub http_send_name_header: Option<Option<String>>,
    #[serde(rename = "http_use_proxy_header", skip_serializing_if = "Option::is_none")]
    pub http_use_proxy_header: Option<HttpUseProxyHeader>,
    #[serde(rename = "httpchk_params", skip_serializing_if = "Option::is_none")]
    pub httpchk_params: Option<Box<crate::models::HttpchkParams>>,
    #[serde(rename = "httplog", skip_serializing_if = "Option::is_none")]
    pub httplog: Option<bool>,
    #[serde(rename = "httpslog", skip_serializing_if = "Option::is_none")]
    pub httpslog: Option<Httpslog>,
    #[serde(rename = "idle_close_on_response", skip_serializing_if = "Option::is_none")]
    pub idle_close_on_response: Option<IdleCloseOnResponse>,
    #[serde(rename = "independent_streams", skip_serializing_if = "Option::is_none")]
    pub independent_streams: Option<IndependentStreams>,
    #[serde(rename = "load_server_state_from_file", skip_serializing_if = "Option::is_none")]
    pub load_server_state_from_file: Option<LoadServerStateFromFile>,
    #[serde(rename = "log_format", skip_serializing_if = "Option::is_none")]
    pub log_format: Option<String>,
    #[serde(rename = "log_format_sd", skip_serializing_if = "Option::is_none")]
    pub log_format_sd: Option<String>,
    #[serde(rename = "log_health_checks", skip_serializing_if = "Option::is_none")]
    pub log_health_checks: Option<LogHealthChecks>,
    #[serde(rename = "log_separate_errors", skip_serializing_if = "Option::is_none")]
    pub log_separate_errors: Option<LogSeparateErrors>,
    #[serde(rename = "log_tag", skip_serializing_if = "Option::is_none")]
    pub log_tag: Option<String>,
    #[serde(rename = "logasap", skip_serializing_if = "Option::is_none")]
    pub logasap: Option<Logasap>,
    #[serde(rename = "max_keep_alive_queue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_keep_alive_queue: Option<Option<i32>>,
    #[serde(rename = "maxconn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maxconn: Option<Option<i32>>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "monitor_uri", skip_serializing_if = "Option::is_none")]
    pub monitor_uri: Option<String>,
    #[serde(rename = "mysql_check_params", skip_serializing_if = "Option::is_none")]
    pub mysql_check_params: Option<Box<crate::models::MysqlCheckParams>>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "nolinger", skip_serializing_if = "Option::is_none")]
    pub nolinger: Option<Nolinger>,
    #[serde(rename = "originalto", skip_serializing_if = "Option::is_none")]
    pub originalto: Option<Box<crate::models::Originalto>>,
    #[serde(rename = "persist", skip_serializing_if = "Option::is_none")]
    pub persist: Option<Persist>,
    #[serde(rename = "persist_rule", skip_serializing_if = "Option::is_none")]
    pub persist_rule: Option<Box<crate::models::PersistRule>>,
    #[serde(rename = "pgsql_check_params", skip_serializing_if = "Option::is_none")]
    pub pgsql_check_params: Option<Box<crate::models::PgsqlCheckParams>>,
    #[serde(rename = "prefer_last_server", skip_serializing_if = "Option::is_none")]
    pub prefer_last_server: Option<PreferLastServer>,
    #[serde(rename = "queue_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub queue_timeout: Option<Option<i32>>,
    #[serde(rename = "redispatch", skip_serializing_if = "Option::is_none")]
    pub redispatch: Option<Box<crate::models::Redispatch>>,
    #[serde(rename = "retries", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub retries: Option<Option<i32>>,
    #[serde(rename = "retry_on", skip_serializing_if = "Option::is_none")]
    pub retry_on: Option<String>,
    #[serde(rename = "server_fin_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_fin_timeout: Option<Option<i32>>,
    #[serde(rename = "server_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub server_timeout: Option<Option<i32>>,
    #[serde(rename = "smtpchk_params", skip_serializing_if = "Option::is_none")]
    pub smtpchk_params: Option<Box<crate::models::SmtpchkParams>>,
    #[serde(rename = "socket_stats", skip_serializing_if = "Option::is_none")]
    pub socket_stats: Option<SocketStats>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::Source>>,
    #[serde(rename = "splice_auto", skip_serializing_if = "Option::is_none")]
    pub splice_auto: Option<SpliceAuto>,
    #[serde(rename = "splice_request", skip_serializing_if = "Option::is_none")]
    pub splice_request: Option<SpliceRequest>,
    #[serde(rename = "splice_response", skip_serializing_if = "Option::is_none")]
    pub splice_response: Option<SpliceResponse>,
    #[serde(rename = "srvtcpka", skip_serializing_if = "Option::is_none")]
    pub srvtcpka: Option<Srvtcpka>,
    #[serde(rename = "srvtcpka_cnt", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub srvtcpka_cnt: Option<Option<i32>>,
    #[serde(rename = "srvtcpka_idle", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub srvtcpka_idle: Option<Option<i32>>,
    #[serde(rename = "srvtcpka_intvl", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub srvtcpka_intvl: Option<Option<i32>>,
    #[serde(rename = "stats_options", skip_serializing_if = "Option::is_none")]
    pub stats_options: Option<Box<crate::models::StatsOptions>>,
    #[serde(rename = "tarpit_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tarpit_timeout: Option<Option<i32>>,
    #[serde(rename = "tcp_smart_accept", skip_serializing_if = "Option::is_none")]
    pub tcp_smart_accept: Option<TcpSmartAccept>,
    #[serde(rename = "tcp_smart_connect", skip_serializing_if = "Option::is_none")]
    pub tcp_smart_connect: Option<TcpSmartConnect>,
    #[serde(rename = "tcpka", skip_serializing_if = "Option::is_none")]
    pub tcpka: Option<Tcpka>,
    #[serde(rename = "tcplog", skip_serializing_if = "Option::is_none")]
    pub tcplog: Option<bool>,
    #[serde(rename = "transparent", skip_serializing_if = "Option::is_none")]
    pub transparent: Option<Transparent>,
    #[serde(rename = "tunnel_timeout", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tunnel_timeout: Option<Option<i32>>,
    #[serde(rename = "unique_id_format", skip_serializing_if = "Option::is_none")]
    pub unique_id_format: Option<String>,
    #[serde(rename = "unique_id_header", skip_serializing_if = "Option::is_none")]
    pub unique_id_header: Option<String>,
}

impl Defaults {
    /// HAProxy defaults configuration
    pub fn new() -> Defaults {
        Defaults {
            abortonclose: None,
            accept_invalid_http_request: None,
            accept_invalid_http_response: None,
            adv_check: None,
            allbackups: None,
            backlog: None,
            balance: None,
            bind_process: None,
            check_timeout: None,
            checkcache: None,
            clflog: None,
            client_fin_timeout: None,
            client_timeout: None,
            clitcpka: None,
            clitcpka_cnt: None,
            clitcpka_idle: None,
            clitcpka_intvl: None,
            compression: None,
            connect_timeout: None,
            contstats: None,
            cookie: None,
            default_backend: None,
            default_server: None,
            disable_h2_upgrade: None,
            disabled: None,
            dontlog_normal: None,
            dontlognull: None,
            dynamic_cookie_key: None,
            email_alert: None,
            enabled: None,
            error_files: None,
            error_log_format: None,
            errorfiles_from_http_errors: None,
            errorloc302: None,
            errorloc303: None,
            external_check: None,
            external_check_command: None,
            external_check_path: None,
            forwardfor: None,
            from: None,
            fullconn: None,
            h1_case_adjust_bogus_client: None,
            h1_case_adjust_bogus_server: None,
            hash_type: None,
            http_buffer_request: None,
            http_check: None,
            http_use_htx: None,
            http_connection_mode: None,
            http_ignore_probes: None,
            http_keep_alive_timeout: None,
            http_no_delay: None,
            http_pretend_keepalive: None,
            http_request_timeout: None,
            http_restrict_req_hdr_names: None,
            http_reuse: None,
            http_send_name_header: None,
            http_use_proxy_header: None,
            httpchk_params: None,
            httplog: None,
            httpslog: None,
            idle_close_on_response: None,
            independent_streams: None,
            load_server_state_from_file: None,
            log_format: None,
            log_format_sd: None,
            log_health_checks: None,
            log_separate_errors: None,
            log_tag: None,
            logasap: None,
            max_keep_alive_queue: None,
            maxconn: None,
            mode: None,
            monitor_uri: None,
            mysql_check_params: None,
            name: None,
            nolinger: None,
            originalto: None,
            persist: None,
            persist_rule: None,
            pgsql_check_params: None,
            prefer_last_server: None,
            queue_timeout: None,
            redispatch: None,
            retries: None,
            retry_on: None,
            server_fin_timeout: None,
            server_timeout: None,
            smtpchk_params: None,
            socket_stats: None,
            source: None,
            splice_auto: None,
            splice_request: None,
            splice_response: None,
            srvtcpka: None,
            srvtcpka_cnt: None,
            srvtcpka_idle: None,
            srvtcpka_intvl: None,
            stats_options: None,
            tarpit_timeout: None,
            tcp_smart_accept: None,
            tcp_smart_connect: None,
            tcpka: None,
            tcplog: None,
            transparent: None,
            tunnel_timeout: None,
            unique_id_format: None,
            unique_id_header: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Abortonclose {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Abortonclose {
    fn default() -> Abortonclose {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AcceptInvalidHttpRequest {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for AcceptInvalidHttpRequest {
    fn default() -> AcceptInvalidHttpRequest {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AcceptInvalidHttpResponse {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for AcceptInvalidHttpResponse {
    fn default() -> AcceptInvalidHttpResponse {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AdvCheck {
    #[serde(rename = "ssl-hello-chk")]
    SslHelloChk,
    #[serde(rename = "smtpchk")]
    Smtpchk,
    #[serde(rename = "ldap-check")]
    LdapCheck,
    #[serde(rename = "mysql-check")]
    MysqlCheck,
    #[serde(rename = "pgsql-check")]
    PgsqlCheck,
    #[serde(rename = "tcp-check")]
    TcpCheck,
    #[serde(rename = "redis-check")]
    RedisCheck,
    #[serde(rename = "httpchk")]
    Httpchk,
}

impl Default for AdvCheck {
    fn default() -> AdvCheck {
        Self::SslHelloChk
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Allbackups {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Allbackups {
    fn default() -> Allbackups {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Checkcache {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Checkcache {
    fn default() -> Checkcache {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Clitcpka {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Clitcpka {
    fn default() -> Clitcpka {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Contstats {
    #[serde(rename = "enabled")]
    Enabled,
}

impl Default for Contstats {
    fn default() -> Contstats {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DisableH2Upgrade {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for DisableH2Upgrade {
    fn default() -> DisableH2Upgrade {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DontlogNormal {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for DontlogNormal {
    fn default() -> DontlogNormal {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Dontlognull {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Dontlognull {
    fn default() -> Dontlognull {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExternalCheck {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for ExternalCheck {
    fn default() -> ExternalCheck {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum H1CaseAdjustBogusClient {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for H1CaseAdjustBogusClient {
    fn default() -> H1CaseAdjustBogusClient {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum H1CaseAdjustBogusServer {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for H1CaseAdjustBogusServer {
    fn default() -> H1CaseAdjustBogusServer {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpBufferRequest {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpBufferRequest {
    fn default() -> HttpBufferRequest {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpUseHtx {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpUseHtx {
    fn default() -> HttpUseHtx {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpConnectionMode {
    #[serde(rename = "httpclose")]
    Httpclose,
    #[serde(rename = "http-server-close")]
    HttpServerClose,
    #[serde(rename = "http-keep-alive")]
    HttpKeepAlive,
}

impl Default for HttpConnectionMode {
    fn default() -> HttpConnectionMode {
        Self::Httpclose
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpIgnoreProbes {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpIgnoreProbes {
    fn default() -> HttpIgnoreProbes {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpNoDelay {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpNoDelay {
    fn default() -> HttpNoDelay {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpPretendKeepalive {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpPretendKeepalive {
    fn default() -> HttpPretendKeepalive {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpRestrictReqHdrNames {
    #[serde(rename = "preserve")]
    Preserve,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "reject")]
    Reject,
}

impl Default for HttpRestrictReqHdrNames {
    fn default() -> HttpRestrictReqHdrNames {
        Self::Preserve
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpReuse {
    #[serde(rename = "aggressive")]
    Aggressive,
    #[serde(rename = "always")]
    Always,
    #[serde(rename = "never")]
    Never,
    #[serde(rename = "safe")]
    Safe,
}

impl Default for HttpReuse {
    fn default() -> HttpReuse {
        Self::Aggressive
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HttpUseProxyHeader {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for HttpUseProxyHeader {
    fn default() -> HttpUseProxyHeader {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Httpslog {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Httpslog {
    fn default() -> Httpslog {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IdleCloseOnResponse {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for IdleCloseOnResponse {
    fn default() -> IdleCloseOnResponse {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IndependentStreams {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for IndependentStreams {
    fn default() -> IndependentStreams {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LoadServerStateFromFile {
    #[serde(rename = "global")]
    Global,
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "none")]
    None,
}

impl Default for LoadServerStateFromFile {
    fn default() -> LoadServerStateFromFile {
        Self::Global
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogHealthChecks {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for LogHealthChecks {
    fn default() -> LogHealthChecks {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LogSeparateErrors {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for LogSeparateErrors {
    fn default() -> LogSeparateErrors {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Logasap {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Logasap {
    fn default() -> Logasap {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "tcp")]
    Tcp,
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "log")]
    Log,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Tcp
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Nolinger {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Nolinger {
    fn default() -> Nolinger {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Persist {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Persist {
    fn default() -> Persist {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PreferLastServer {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for PreferLastServer {
    fn default() -> PreferLastServer {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SocketStats {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SocketStats {
    fn default() -> SocketStats {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SpliceAuto {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SpliceAuto {
    fn default() -> SpliceAuto {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SpliceRequest {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SpliceRequest {
    fn default() -> SpliceRequest {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SpliceResponse {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for SpliceResponse {
    fn default() -> SpliceResponse {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Srvtcpka {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Srvtcpka {
    fn default() -> Srvtcpka {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TcpSmartAccept {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for TcpSmartAccept {
    fn default() -> TcpSmartAccept {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TcpSmartConnect {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for TcpSmartConnect {
    fn default() -> TcpSmartConnect {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tcpka {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Tcpka {
    fn default() -> Tcpka {
        Self::Enabled
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Transparent {
    #[serde(rename = "enabled")]
    Enabled,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Transparent {
    fn default() -> Transparent {
        Self::Enabled
    }
}

