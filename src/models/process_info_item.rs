/*
 * HAProxy Data Plane API
 *
 * API for editing and managing haproxy instances. Provides process information, configuration management, haproxy stats and logs. 
 *
 * The version of the OpenAPI document: 2.9
 * Contact: support@haproxy.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProcessInfoItem {
    #[serde(rename = "active_peers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_peers: Option<Option<i32>>,
    #[serde(rename = "busy_polling", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub busy_polling: Option<Option<i32>>,
    #[serde(rename = "bytes_out_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bytes_out_rate: Option<Option<i32>>,
    #[serde(rename = "compress_bps_in", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub compress_bps_in: Option<Option<i32>>,
    #[serde(rename = "compress_bps_out", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub compress_bps_out: Option<Option<i32>>,
    #[serde(rename = "compress_bps_rate_lim", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub compress_bps_rate_lim: Option<Option<i32>>,
    #[serde(rename = "conn_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_rate: Option<Option<i32>>,
    #[serde(rename = "conn_rate_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub conn_rate_limit: Option<Option<i32>>,
    #[serde(rename = "connected_peers", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connected_peers: Option<Option<i32>>,
    #[serde(rename = "cum_conns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cum_conns: Option<Option<i32>>,
    #[serde(rename = "cum_req", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cum_req: Option<Option<i32>>,
    #[serde(rename = "cum_ssl_conns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cum_ssl_conns: Option<Option<i32>>,
    #[serde(rename = "curr_conns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub curr_conns: Option<Option<i32>>,
    #[serde(rename = "curr_ssl_conns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub curr_ssl_conns: Option<Option<i32>>,
    #[serde(rename = "dropped_logs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dropped_logs: Option<Option<i32>>,
    #[serde(rename = "failed_resolutions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub failed_resolutions: Option<Option<i32>>,
    #[serde(rename = "hard_max_conn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hard_max_conn: Option<Option<i32>>,
    #[serde(rename = "idle_pct", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub idle_pct: Option<Option<i32>>,
    #[serde(rename = "jobs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub jobs: Option<Option<i32>>,
    #[serde(rename = "listeners", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub listeners: Option<Option<i32>>,
    #[serde(rename = "max_conn", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_conn: Option<Option<i32>>,
    #[serde(rename = "max_conn_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_conn_rate: Option<Option<i32>>,
    #[serde(rename = "max_pipes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_pipes: Option<Option<i32>>,
    #[serde(rename = "max_sess_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_sess_rate: Option<Option<i32>>,
    #[serde(rename = "max_sock", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_sock: Option<Option<i32>>,
    #[serde(rename = "max_ssl_conns", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_ssl_conns: Option<Option<i32>>,
    #[serde(rename = "max_ssl_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_ssl_rate: Option<Option<i32>>,
    #[serde(rename = "max_zlib_mem_usage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_zlib_mem_usage: Option<Option<i32>>,
    #[serde(rename = "mem_max_mb", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mem_max_mb: Option<Option<i32>>,
    /// Number of threads
    #[serde(rename = "nbthread", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub nbthread: Option<Option<i32>>,
    #[serde(rename = "node", skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    /// Process id of the replying worker process
    #[serde(rename = "pid", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pid: Option<Option<i32>>,
    #[serde(rename = "pipes_free", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pipes_free: Option<Option<i32>>,
    #[serde(rename = "pipes_used", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pipes_used: Option<Option<i32>>,
    #[serde(rename = "pool_alloc_mb", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_alloc_mb: Option<Option<i32>>,
    #[serde(rename = "pool_failed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_failed: Option<Option<i32>>,
    #[serde(rename = "pool_used_mb", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pool_used_mb: Option<Option<i32>>,
    /// Process number
    #[serde(rename = "process_num", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub process_num: Option<Option<i32>>,
    /// Number of spawned processes
    #[serde(rename = "processes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub processes: Option<Option<i32>>,
    /// HAProxy version release date
    #[serde(rename = "release_date", skip_serializing_if = "Option::is_none")]
    pub release_date: Option<String>,
    #[serde(rename = "run_queue", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub run_queue: Option<Option<i32>>,
    #[serde(rename = "sess_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sess_rate: Option<Option<i32>>,
    #[serde(rename = "sess_rate_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sess_rate_limit: Option<Option<i32>>,
    #[serde(rename = "ssl_backend_key_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_backend_key_rate: Option<Option<i32>>,
    #[serde(rename = "ssl_backend_max_key_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_backend_max_key_rate: Option<Option<i32>>,
    #[serde(rename = "ssl_cache_lookups", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_cache_lookups: Option<Option<i32>>,
    #[serde(rename = "ssl_cache_misses", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_cache_misses: Option<Option<i32>>,
    #[serde(rename = "ssl_frontend_key_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_frontend_key_rate: Option<Option<i32>>,
    #[serde(rename = "ssl_frontend_max_key_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_frontend_max_key_rate: Option<Option<i32>>,
    #[serde(rename = "ssl_frontend_session_reuse", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_frontend_session_reuse: Option<Option<i32>>,
    #[serde(rename = "ssl_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_rate: Option<Option<i32>>,
    #[serde(rename = "ssl_rate_limit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_rate_limit: Option<Option<i32>>,
    #[serde(rename = "stopping", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stopping: Option<Option<i32>>,
    #[serde(rename = "tasks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Option<i32>>,
    #[serde(rename = "total_bytes_out", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub total_bytes_out: Option<Option<i32>>,
    #[serde(rename = "ulimit_n", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ulimit_n: Option<Option<i32>>,
    #[serde(rename = "unstoppable", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unstoppable: Option<Option<i32>>,
    /// HAProxy uptime in s
    #[serde(rename = "uptime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub uptime: Option<Option<i32>>,
    /// HAProxy version string
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "zlib_mem_usage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub zlib_mem_usage: Option<Option<i32>>,
}

impl ProcessInfoItem {
    pub fn new() -> ProcessInfoItem {
        ProcessInfoItem {
            active_peers: None,
            busy_polling: None,
            bytes_out_rate: None,
            compress_bps_in: None,
            compress_bps_out: None,
            compress_bps_rate_lim: None,
            conn_rate: None,
            conn_rate_limit: None,
            connected_peers: None,
            cum_conns: None,
            cum_req: None,
            cum_ssl_conns: None,
            curr_conns: None,
            curr_ssl_conns: None,
            dropped_logs: None,
            failed_resolutions: None,
            hard_max_conn: None,
            idle_pct: None,
            jobs: None,
            listeners: None,
            max_conn: None,
            max_conn_rate: None,
            max_pipes: None,
            max_sess_rate: None,
            max_sock: None,
            max_ssl_conns: None,
            max_ssl_rate: None,
            max_zlib_mem_usage: None,
            mem_max_mb: None,
            nbthread: None,
            node: None,
            pid: None,
            pipes_free: None,
            pipes_used: None,
            pool_alloc_mb: None,
            pool_failed: None,
            pool_used_mb: None,
            process_num: None,
            processes: None,
            release_date: None,
            run_queue: None,
            sess_rate: None,
            sess_rate_limit: None,
            ssl_backend_key_rate: None,
            ssl_backend_max_key_rate: None,
            ssl_cache_lookups: None,
            ssl_cache_misses: None,
            ssl_frontend_key_rate: None,
            ssl_frontend_max_key_rate: None,
            ssl_frontend_session_reuse: None,
            ssl_rate: None,
            ssl_rate_limit: None,
            stopping: None,
            tasks: None,
            total_bytes_out: None,
            ulimit_n: None,
            unstoppable: None,
            uptime: None,
            version: None,
            zlib_mem_usage: None,
        }
    }
}


